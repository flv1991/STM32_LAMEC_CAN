
C:\Users\fv\Desktop\TAMA\GPIO\project\RIDE\obj\stm32f10x_spi.o:     file format elf32-littlearm
C:\Users\fv\Desktop\TAMA\GPIO\project\RIDE\obj\stm32f10x_spi.o


Disassembly of section .text.SPI_I2S_DeInit:

00000000 <SPI_I2S_DeInit>:
SPI_I2S_DeInit():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:63
* Input          : - SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
   0:	b508      	push	{r3, lr}
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:67
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  switch (*(u32*)&SPIx)
   2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
   6:	f2c4 0300 	movt	r3, #16384	; 0x4000
   a:	4298      	cmp	r0, r3
   c:	d026      	beq.n	5c <SPI_I2S_DeInit+0x5c>
   e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  12:	f2c4 0301 	movt	r3, #16385	; 0x4001
  16:	4298      	cmp	r0, r3
  18:	d006      	beq.n	28 <SPI_I2S_DeInit+0x28>
  1a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
  1e:	f2c4 0300 	movt	r3, #16384	; 0x4000
  22:	4298      	cmp	r0, r3
  24:	d126      	bne.n	74 <SPI_I2S_DeInit+0x74>
  26:	e00c      	b.n	42 <SPI_I2S_DeInit+0x42>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:71
  {
    case SPI1_BASE:
      /* Enable SPI1 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
  28:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  2c:	f04f 0101 	mov.w	r1, #1
  30:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:73
      /* Release SPI1 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  34:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  38:	f04f 0100 	mov.w	r1, #0
  3c:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:74
      break;
  40:	bd08      	pop	{r3, pc}
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:78

    case SPI2_BASE:
      /* Enable SPI2 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
  42:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  46:	f04f 0101 	mov.w	r1, #1
  4a:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:80
      /* Release SPI2 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
  4e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  52:	f04f 0100 	mov.w	r1, #0
  56:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:81
      break;
  5a:	bd08      	pop	{r3, pc}
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:85

    case SPI3_BASE:
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
  5c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  60:	f04f 0101 	mov.w	r1, #1
  64:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:87
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
  68:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  6c:	f04f 0100 	mov.w	r1, #0
  70:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
  74:	bd08      	pop	{r3, pc}
  76:	bf00      	nop

Disassembly of section .text.SPI_Init:

00000000 <SPI_Init>:
SPI_Init():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:107
*                    SPI peripheral.
* Output         : None
* Return         : None
******************************************************************************/
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
   0:	b410      	push	{r4}
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:126
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
   2:	8802      	ldrh	r2, [r0, #0]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:128
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
   4:	f402 5241 	and.w	r2, r2, #12352	; 0x3040
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:137
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (u16)((u32)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
   8:	884c      	ldrh	r4, [r1, #2]
   a:	880b      	ldrh	r3, [r1, #0]
   c:	ea44 0303 	orr.w	r3, r4, r3
  10:	888c      	ldrh	r4, [r1, #4]
  12:	4323      	orrs	r3, r4
  14:	88cc      	ldrh	r4, [r1, #6]
  16:	4323      	orrs	r3, r4
  18:	890c      	ldrh	r4, [r1, #8]
  1a:	4323      	orrs	r3, r4
  1c:	894c      	ldrh	r4, [r1, #10]
  1e:	4323      	orrs	r3, r4
  20:	898c      	ldrh	r4, [r1, #12]
  22:	4323      	orrs	r3, r4
  24:	89cc      	ldrh	r4, [r1, #14]
  26:	4323      	orrs	r3, r4
  28:	ea42 0303 	orr.w	r3, r2, r3
  2c:	b29b      	uxth	r3, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:142
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
  2e:	8003      	strh	r3, [r0, #0]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:145
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
  30:	8b83      	ldrh	r3, [r0, #28]
  32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  36:	ea4f 4303 	mov.w	r3, r3, lsl #16
  3a:	ea4f 4313 	mov.w	r3, r3, lsr #16
  3e:	8383      	strh	r3, [r0, #28]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:149

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
  40:	8a0b      	ldrh	r3, [r1, #16]
  42:	8203      	strh	r3, [r0, #16]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:150
}
  44:	bc10      	pop	{r4}
  46:	4770      	bx	lr

Disassembly of section .text.I2S_Init:

00000000 <I2S_Init>:
I2S_Init():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:165
*                    SPI peripheral configured in I2S mode.
* Output         : None
* Return         : None
******************************************************************************/
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
   0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2:	b087      	sub	sp, #28
   4:	4605      	mov	r5, r0
   6:	460c      	mov	r4, r1
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:182
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
   8:	8b83      	ldrh	r3, [r0, #28]
   a:	f423 637a 	bic.w	r3, r3, #4000	; 0xfa0
   e:	f023 031f 	bic.w	r3, r3, #31
  12:	ea4f 4303 	mov.w	r3, r3, lsl #16
  16:	ea4f 4313 	mov.w	r3, r3, lsr #16
  1a:	8383      	strh	r3, [r0, #28]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:183
  SPIx->I2SPR = 0x0002;
  1c:	f04f 0102 	mov.w	r1, #2
  20:	8401      	strh	r1, [r0, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:186
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
  22:	8b86      	ldrh	r6, [r0, #28]
  24:	b2b6      	uxth	r6, r6
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:189
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
  26:	8923      	ldrh	r3, [r4, #8]
  28:	2b02      	cmp	r3, #2
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:191
  {
    i2sodd = (u16)0;
  2a:	bf04      	itt	eq
  2c:	2200      	moveq	r2, #0
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:192
    i2sdiv = (u16)2;   
  2e:	2302      	moveq	r3, #2
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:189
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
  30:	d031      	beq.n	96 <I2S_Init+0x96>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:198
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) */
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
  32:	88a7      	ldrh	r7, [r4, #4]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:201
    {
      /* Packet length is 16 bits */
      packetlength = 1;
  34:	2f00      	cmp	r7, #0
  36:	bf14      	ite	ne
  38:	2702      	movne	r7, #2
  3a:	2701      	moveq	r7, #1
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:209
    {
      /* Packet length is 32 bits */
      packetlength = 2;
    }
    /* Get System Clock frequency */
    RCC_GetClocksFreq(&RCC_Clocks);
  3c:	a801      	add	r0, sp, #4
  3e:	f7ff fffe 	bl	0 <RCC_GetClocksFreq>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:212
    
    /* Compute the Real divider depending on the MCLK output state with a flaoting point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
  42:	88e3      	ldrh	r3, [r4, #6]
  44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:215
    {
      /* MCLK output is enabled */
      tmp = (u16)(((10 * RCC_Clocks.SYSCLK_Frequency) / (256 * I2S_InitStruct->I2S_AudioFreq)) + 5);
  48:	9b01      	ldr	r3, [sp, #4]
  4a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4e:	ea4f 0343 	mov.w	r3, r3, lsl #1
  52:	8922      	ldrh	r2, [r4, #8]
  54:	bf07      	ittee	eq
  56:	0212      	lsleq	r2, r2, #8
  58:	fbb3 f3f2 	udiveq	r3, r3, r2
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:220
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (u16)(((10 * RCC_Clocks.SYSCLK_Frequency) / (32 * packetlength * I2S_InitStruct->I2S_AudioFreq)) + 5);
  5c:	0152      	lslne	r2, r2, #5
  5e:	4357      	mulne	r7, r2
  60:	bf18      	it	ne
  62:	fbb3 f3f7 	udivne	r3, r3, r7
  66:	f103 0305 	add.w	r3, r3, #5
  6a:	b29b      	uxth	r3, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:224
    }
    
    /* Remove the flaoting point */
    tmp = tmp/10;  
  6c:	f64c 42cd 	movw	r2, #52429	; 0xcccd
  70:	f6cc 42cc 	movt	r2, #52428	; 0xcccc
  74:	fba2 1303 	umull	r1, r3, r2, r3
  78:	ea4f 03d3 	mov.w	r3, r3, lsr #3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:230
      
    /* Check the parity of the divider */
    i2sodd = (u16)(tmp & (u16)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (u16)((tmp - i2sodd) / 2);
  7c:	f003 0201 	and.w	r2, r3, #1
  80:	ea4f 0353 	mov.w	r3, r3, lsr #1
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:237
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (u16) (i2sodd << 8);
  }
  
  /* Test if the divider is 1 or 0 */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
  84:	f1a3 0102 	sub.w	r1, r3, #2
  88:	b289      	uxth	r1, r1
  8a:	29fd      	cmp	r1, #253	; 0xfd
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:233
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (u16)((tmp - i2sodd) / 2);
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (u16) (i2sodd << 8);
  8c:	bf99      	ittee	ls
  8e:	0212      	lslls	r2, r2, #8
  90:	b292      	uxthls	r2, r2
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:241
  /* Test if the divider is 1 or 0 */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
  {
    /* Set the default values */
    i2sdiv = 2;
    i2sodd = 0;
  92:	2200      	movhi	r2, #0
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:240
  
  /* Test if the divider is 1 or 0 */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
  {
    /* Set the default values */
    i2sdiv = 2;
  94:	2302      	movhi	r3, #2
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:245
    i2sodd = 0;
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (u16)(i2sdiv | i2sodd | I2S_InitStruct->I2S_MCLKOutput);  
  96:	4313      	orrs	r3, r2
  98:	88e2      	ldrh	r2, [r4, #6]
  9a:	4313      	orrs	r3, r2
  9c:	842b      	strh	r3, [r5, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:248
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (u16)(I2S_Mode_Select | I2S_InitStruct->I2S_Mode | \
  9e:	8823      	ldrh	r3, [r4, #0]
  a0:	ea46 0303 	orr.w	r3, r6, r3
  a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  a8:	8862      	ldrh	r2, [r4, #2]
  aa:	4313      	orrs	r3, r2
  ac:	88a2      	ldrh	r2, [r4, #4]
  ae:	4313      	orrs	r3, r2
  b0:	8962      	ldrh	r2, [r4, #10]
  b2:	4313      	orrs	r3, r2
  b4:	b29b      	uxth	r3, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:253
                  I2S_InitStruct->I2S_Standard | I2S_InitStruct->I2S_DataFormat | \
                  I2S_InitStruct->I2S_CPOL);
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;                                    
  b6:	83ab      	strh	r3, [r5, #28]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:254
}
  b8:	b007      	add	sp, #28
  ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

Disassembly of section .text.SPI_StructInit:

00000000 <SPI_StructInit>:
SPI_StructInit():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:268
*******************************************************************************/
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
   0:	f04f 0300 	mov.w	r3, #0
   4:	8003      	strh	r3, [r0, #0]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:271

  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
   6:	8043      	strh	r3, [r0, #2]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:274

  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
   8:	8083      	strh	r3, [r0, #4]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:277

  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
   a:	80c3      	strh	r3, [r0, #6]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:280

  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
   c:	8103      	strh	r3, [r0, #8]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:283

  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
   e:	8143      	strh	r3, [r0, #10]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:286

  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
  10:	8183      	strh	r3, [r0, #12]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:289

  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
  12:	81c3      	strh	r3, [r0, #14]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:292

  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
  14:	f04f 0307 	mov.w	r3, #7
  18:	8203      	strh	r3, [r0, #16]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:293
}
  1a:	4770      	bx	lr

Disassembly of section .text.I2S_StructInit:

00000000 <I2S_StructInit>:
I2S_StructInit():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:307
*******************************************************************************/
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
   0:	f04f 0300 	mov.w	r3, #0
   4:	8003      	strh	r3, [r0, #0]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:310
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
   6:	8043      	strh	r3, [r0, #2]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:313
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
   8:	8083      	strh	r3, [r0, #4]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:316
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
   a:	80c3      	strh	r3, [r0, #6]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:319
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
   c:	f04f 0202 	mov.w	r2, #2
  10:	8102      	strh	r2, [r0, #8]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:322
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
  12:	8143      	strh	r3, [r0, #10]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:323
}
  14:	4770      	bx	lr
  16:	bf00      	nop

Disassembly of section .text.SPI_Cmd:

00000000 <SPI_Cmd>:
SPI_Cmd():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:340
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
   0:	b129      	cbz	r1, e <SPI_Cmd+0xe>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:343
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
   2:	8803      	ldrh	r3, [r0, #0]
   4:	b29b      	uxth	r3, r3
   6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   a:	8003      	strh	r3, [r0, #0]
   c:	4770      	bx	lr
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:348
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
   e:	8803      	ldrh	r3, [r0, #0]
  10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  14:	ea4f 4303 	mov.w	r3, r3, lsl #16
  18:	ea4f 4313 	mov.w	r3, r3, lsr #16
  1c:	8003      	strh	r3, [r0, #0]
  1e:	4770      	bx	lr

Disassembly of section .text.I2S_Cmd:

00000000 <I2S_Cmd>:
I2S_Cmd():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:367
{
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
   0:	b129      	cbz	r1, e <I2S_Cmd+0xe>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:370
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= I2SCFGR_I2SE_Set;
   2:	8b83      	ldrh	r3, [r0, #28]
   4:	b29b      	uxth	r3, r3
   6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   a:	8383      	strh	r3, [r0, #28]
   c:	4770      	bx	lr
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:375
  }
  else
  {
    /* Disable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR &= I2SCFGR_I2SE_Reset;
   e:	8b83      	ldrh	r3, [r0, #28]
  10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  14:	ea4f 4303 	mov.w	r3, r3, lsl #16
  18:	ea4f 4313 	mov.w	r3, r3, lsr #16
  1c:	8383      	strh	r3, [r0, #28]
  1e:	4770      	bx	lr

Disassembly of section .text.SPI_I2S_ITConfig:

00000000 <SPI_I2S_ITConfig>:
SPI_I2S_ITConfig():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:408
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI/I2S IT index */
  itpos = SPI_I2S_IT >> 4;
  /* Set the IT mask */
  itmask = (u16)((u16)1 << itpos);
   0:	ea4f 1111 	mov.w	r1, r1, lsr #4
   4:	f04f 0301 	mov.w	r3, #1
   8:	fa03 f301 	lsl.w	r3, r3, r1
   c:	b29b      	uxth	r3, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:410

  if (NewState != DISABLE)
   e:	b122      	cbz	r2, 1a <SPI_I2S_ITConfig+0x1a>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:413
  {
    /* Enable the selected SPI/I2S interrupt */
    SPIx->CR2 |= itmask;
  10:	8882      	ldrh	r2, [r0, #4]
  12:	b292      	uxth	r2, r2
  14:	4313      	orrs	r3, r2
  16:	8083      	strh	r3, [r0, #4]
  18:	4770      	bx	lr
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:418
  }
  else
  {
    /* Disable the selected SPI/I2S interrupt */
    SPIx->CR2 &= (u16)~itmask;
  1a:	8882      	ldrh	r2, [r0, #4]
  1c:	b292      	uxth	r2, r2
  1e:	ea22 0303 	bic.w	r3, r2, r3
  22:	8083      	strh	r3, [r0, #4]
  24:	4770      	bx	lr
  26:	bf00      	nop

Disassembly of section .text.SPI_I2S_DMACmd:

00000000 <SPI_I2S_DMACmd>:
SPI_I2S_DMACmd():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:446
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
   0:	b122      	cbz	r2, c <SPI_I2S_DMACmd+0xc>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:449
  {
    /* Enable the selected SPI/I2S DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
   2:	8883      	ldrh	r3, [r0, #4]
   4:	b29b      	uxth	r3, r3
   6:	4319      	orrs	r1, r3
   8:	8081      	strh	r1, [r0, #4]
   a:	4770      	bx	lr
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:454
  }
  else
  {
    /* Disable the selected SPI/I2S DMA requests */
    SPIx->CR2 &= (u16)~SPI_I2S_DMAReq;
   c:	8883      	ldrh	r3, [r0, #4]
   e:	b29b      	uxth	r3, r3
  10:	ea23 0101 	bic.w	r1, r3, r1
  14:	8081      	strh	r1, [r0, #4]
  16:	4770      	bx	lr

Disassembly of section .text.SPI_I2S_SendData:

00000000 <SPI_I2S_SendData>:
SPI_I2S_SendData():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:474
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
   0:	8181      	strh	r1, [r0, #12]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:475
}
   2:	4770      	bx	lr

Disassembly of section .text.SPI_I2S_ReceiveData:

00000000 <SPI_I2S_ReceiveData>:
SPI_I2S_ReceiveData():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:492
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
   0:	8980      	ldrh	r0, [r0, #12]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:493
}
   2:	b280      	uxth	r0, r0
   4:	4770      	bx	lr
   6:	bf00      	nop

Disassembly of section .text.SPI_NSSInternalSoftwareConfig:

00000000 <SPI_NSSInternalSoftwareConfig>:
SPI_NSSInternalSoftwareConfig():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:513
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));

  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
   0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
   4:	4299      	cmp	r1, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:516
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
   6:	8803      	ldrh	r3, [r0, #0]
   8:	bf19      	ittee	ne
   a:	b29b      	uxthne	r3, r3
   c:	f443 7380 	orrne.w	r3, r3, #256	; 0x100
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:521
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
  10:	f423 7380 	biceq.w	r3, r3, #256	; 0x100
  14:	041b      	lsleq	r3, r3, #16
  16:	bf08      	it	eq
  18:	0c1b      	lsreq	r3, r3, #16
  1a:	8003      	strh	r3, [r0, #0]
  1c:	4770      	bx	lr
  1e:	bf00      	nop

Disassembly of section .text.SPI_SSOutputCmd:

00000000 <SPI_SSOutputCmd>:
SPI_SSOutputCmd():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:540
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
   0:	b129      	cbz	r1, e <SPI_SSOutputCmd+0xe>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:543
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= CR2_SSOE_Set;
   2:	8883      	ldrh	r3, [r0, #4]
   4:	b29b      	uxth	r3, r3
   6:	f043 0304 	orr.w	r3, r3, #4
   a:	8083      	strh	r3, [r0, #4]
   c:	4770      	bx	lr
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:548
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= CR2_SSOE_Reset;
   e:	8883      	ldrh	r3, [r0, #4]
  10:	f023 0304 	bic.w	r3, r3, #4
  14:	ea4f 4303 	mov.w	r3, r3, lsl #16
  18:	ea4f 4313 	mov.w	r3, r3, lsr #16
  1c:	8083      	strh	r3, [r0, #4]
  1e:	4770      	bx	lr

Disassembly of section .text.SPI_DataSizeConfig:

00000000 <SPI_DataSizeConfig>:
SPI_DataSizeConfig():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:570
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));

  /* Clear DFF bit */
  SPIx->CR1 &= (u16)~SPI_DataSize_16b;
   0:	8803      	ldrh	r3, [r0, #0]
   2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   e:	8003      	strh	r3, [r0, #0]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:572
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
  10:	8803      	ldrh	r3, [r0, #0]
  12:	b29b      	uxth	r3, r3
  14:	ea41 0303 	orr.w	r3, r1, r3
  18:	8003      	strh	r3, [r0, #0]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:573
}
  1a:	4770      	bx	lr

Disassembly of section .text.SPI_TransmitCRC:

00000000 <SPI_TransmitCRC>:
SPI_TransmitCRC():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:588
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= CR1_CRCNext_Set;
   0:	8803      	ldrh	r3, [r0, #0]
   2:	b29b      	uxth	r3, r3
   4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   8:	8003      	strh	r3, [r0, #0]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:589
}
   a:	4770      	bx	lr

Disassembly of section .text.SPI_CalculateCRC:

00000000 <SPI_CalculateCRC>:
SPI_CalculateCRC():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:607
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
   0:	b129      	cbz	r1, e <SPI_CalculateCRC+0xe>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:610
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= CR1_CRCEN_Set;
   2:	8803      	ldrh	r3, [r0, #0]
   4:	b29b      	uxth	r3, r3
   6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   a:	8003      	strh	r3, [r0, #0]
   c:	4770      	bx	lr
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:615
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= CR1_CRCEN_Reset;
   e:	8803      	ldrh	r3, [r0, #0]
  10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  14:	ea4f 4303 	mov.w	r3, r3, lsl #16
  18:	ea4f 4313 	mov.w	r3, r3, lsr #16
  1c:	8003      	strh	r3, [r0, #0]
  1e:	4770      	bx	lr

Disassembly of section .text.SPI_GetCRC:

00000000 <SPI_GetCRC>:
SPI_GetCRC():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:639

  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));

  if (SPI_CRC != SPI_CRC_Rx)
   0:	2901      	cmp	r1, #1
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:642
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
   2:	bf19      	ittee	ne
   4:	8b00      	ldrhne	r0, [r0, #24]
   6:	b280      	uxthne	r0, r0
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:647
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
   8:	8a80      	ldrheq	r0, [r0, #20]
   a:	b280      	uxtheq	r0, r0
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:652
  }

  /* Return the selected CRC register */
  return crcreg;
}
   c:	4770      	bx	lr
   e:	bf00      	nop

Disassembly of section .text.SPI_GetCRCPolynomial:

00000000 <SPI_GetCRCPolynomial>:
SPI_GetCRCPolynomial():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:667
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
   0:	8a00      	ldrh	r0, [r0, #16]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:668
}
   2:	b280      	uxth	r0, r0
   4:	4770      	bx	lr
   6:	bf00      	nop

Disassembly of section .text.SPI_BiDirectionalLineConfig:

00000000 <SPI_BiDirectionalLineConfig>:
SPI_BiDirectionalLineConfig():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:689
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));

  if (SPI_Direction == SPI_Direction_Tx)
   0:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:692
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
   4:	8803      	ldrh	r3, [r0, #0]
   6:	bf07      	ittee	eq
   8:	b29b      	uxtheq	r3, r3
   a:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:697
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
   e:	f423 4380 	bicne.w	r3, r3, #16384	; 0x4000
  12:	041b      	lslne	r3, r3, #16
  14:	bf18      	it	ne
  16:	0c1b      	lsrne	r3, r3, #16
  18:	8003      	strh	r3, [r0, #0]
  1a:	4770      	bx	lr

Disassembly of section .text.SPI_I2S_GetFlagStatus:

00000000 <SPI_I2S_GetFlagStatus>:
SPI_I2S_GetFlagStatus():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:729
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));

  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (u16)RESET)
   0:	8903      	ldrh	r3, [r0, #8]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:732
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
   2:	4219      	tst	r1, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:741
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
}
   4:	bf0c      	ite	eq
   6:	2000      	moveq	r0, #0
   8:	2001      	movne	r0, #1
   a:	4770      	bx	lr

Disassembly of section .text.SPI_I2S_ClearFlag:

00000000 <SPI_I2S_ClearFlag>:
SPI_I2S_ClearFlag():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:772
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
    /* Clear the selected SPI CRC Error (CRCERR) flag */
    SPIx->SR = (u16)~SPI_I2S_FLAG;
   0:	ea6f 0101 	mvn.w	r1, r1
   4:	b289      	uxth	r1, r1
   6:	8101      	strh	r1, [r0, #8]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:773
}
   8:	4770      	bx	lr
   a:	bf00      	nop

Disassembly of section .text.SPI_I2S_GetITStatus:

00000000 <SPI_I2S_GetITStatus>:
SPI_I2S_GetITStatus():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:793
*                       - I2S_IT_UDR: Underrun Error interrupt.
* Output         : None
* Return         : The new state of SPI_I2S_IT (SET or RESET).
*******************************************************************************/
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, u8 SPI_I2S_IT)
{
   0:	b410      	push	{r4}
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:809
  /* Get the SPI/I2S IT mask */
  itmask = SPI_I2S_IT >> 4;
  /* Set the IT mask */
  itmask = (u16)((u16)0x01 << itmask);
  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
   2:	8883      	ldrh	r3, [r0, #4]
   4:	b29c      	uxth	r4, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:812

  /* Check the status of the specified SPI/I2S interrupt */
  if (((SPIx->SR & itpos) != (u16)RESET) && enablestatus)
   6:	8902      	ldrh	r2, [r0, #8]
   8:	b292      	uxth	r2, r2
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:802
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI/I2S IT index */
  itpos = (u16)((u16)0x01 << (SPI_I2S_IT & (u8)0x0F));
   a:	f001 030f 	and.w	r3, r1, #15
   e:	f04f 0001 	mov.w	r0, #1
  12:	fa00 f303 	lsl.w	r3, r0, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:812
  itmask = (u16)((u16)0x01 << itmask);
  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI/I2S interrupt */
  if (((SPIx->SR & itpos) != (u16)RESET) && enablestatus)
  16:	421a      	tst	r2, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:820
    bitstatus = SET;
  }
  else
  {
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
  18:	bf08      	it	eq
  1a:	2000      	moveq	r0, #0
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:812
  itmask = (u16)((u16)0x01 << itmask);
  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI/I2S interrupt */
  if (((SPIx->SR & itpos) != (u16)RESET) && enablestatus)
  1c:	d007      	beq.n	2e <SPI_I2S_GetITStatus+0x2e>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:807
  itpos = (u16)((u16)0x01 << (SPI_I2S_IT & (u8)0x0F));

  /* Get the SPI/I2S IT mask */
  itmask = SPI_I2S_IT >> 4;
  /* Set the IT mask */
  itmask = (u16)((u16)0x01 << itmask);
  1e:	ea4f 1111 	mov.w	r1, r1, lsr #4
  22:	fa00 f101 	lsl.w	r1, r0, r1
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:792
*                       - SPI_IT_CRCERR: CRC Error interrupt.
*                       - I2S_IT_UDR: Underrun Error interrupt.
* Output         : None
* Return         : The new state of SPI_I2S_IT (SET or RESET).
*******************************************************************************/
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, u8 SPI_I2S_IT)
  26:	420c      	tst	r4, r1
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:815

  /* Check the status of the specified SPI/I2S interrupt */
  if (((SPIx->SR & itpos) != (u16)RESET) && enablestatus)
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
  28:	bf0c      	ite	eq
  2a:	2000      	moveq	r0, #0
  2c:	2001      	movne	r0, #1
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:824
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
}
  2e:	bc10      	pop	{r4}
  30:	4770      	bx	lr
  32:	bf00      	nop

Disassembly of section .text.SPI_I2S_ClearITPendingBit:

00000000 <SPI_I2S_ClearITPendingBit>:
SPI_I2S_ClearITPendingBit():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:858
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = (u16)((u16)0x01 << (SPI_I2S_IT & (u8)0x0F));
   0:	f001 010f 	and.w	r1, r1, #15
   4:	f04f 0301 	mov.w	r3, #1
   8:	fa03 f301 	lsl.w	r3, r3, r1
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:860
  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (u16)~itpos;
   c:	ea6f 0303 	mvn.w	r3, r3
  10:	b29b      	uxth	r3, r3
  12:	8103      	strh	r3, [r0, #8]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_spi.c:861
}
  14:	4770      	bx	lr
  16:	bf00      	nop
