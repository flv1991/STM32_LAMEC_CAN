
C:\Users\fv\Desktop\TAMA\GPIO\project\RIDE\obj\stm32f10x_tim.o:     file format elf32-littlearm
C:\Users\fv\Desktop\TAMA\GPIO\project\RIDE\obj\stm32f10x_tim.o


Disassembly of section .text.TI1_Config:

00000000 <TI1_Config>:
TI1_Config():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3055
* Output         : None
* Return         : None
*******************************************************************************/
static void TI1_Config(TIM_TypeDef* TIMx, u16 TIM_ICPolarity, u16 TIM_ICSelection,
                       u16 TIM_ICFilter)
{
   0:	b430      	push	{r4, r5}
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3059
  u16 tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
   2:	8c04      	ldrh	r4, [r0, #32]
   4:	f024 0401 	bic.w	r4, r4, #1
   8:	ea4f 4404 	mov.w	r4, r4, lsl #16
   c:	ea4f 4414 	mov.w	r4, r4, lsr #16
  10:	8404      	strh	r4, [r0, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3061

  tmpccmr1 = TIMx->CCMR1;
  12:	8b04      	ldrh	r4, [r0, #24]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3062
  tmpccer = TIMx->CCER;
  14:	8c05      	ldrh	r5, [r0, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3065

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  16:	f024 04f3 	bic.w	r4, r4, #243	; 0xf3
  1a:	ea4f 4404 	mov.w	r4, r4, lsl #16
  1e:	ea4f 4414 	mov.w	r4, r4, lsr #16
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3066
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
  22:	ea42 0404 	orr.w	r4, r2, r4
  26:	ea44 1403 	orr.w	r4, r4, r3, lsl #4
  2a:	b2a4      	uxth	r4, r4
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3069

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  2c:	f025 0502 	bic.w	r5, r5, #2
  30:	ea4f 4505 	mov.w	r5, r5, lsl #16
  34:	ea4f 4515 	mov.w	r5, r5, lsr #16
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3070
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
  38:	f045 0501 	orr.w	r5, r5, #1
  3c:	430d      	orrs	r5, r1
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3073

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
  3e:	8304      	strh	r4, [r0, #24]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3074
  TIMx->CCER = tmpccer;
  40:	8405      	strh	r5, [r0, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3075
}
  42:	bc30      	pop	{r4, r5}
  44:	4770      	bx	lr
  46:	bf00      	nop

Disassembly of section .text.TI2_Config:

00000000 <TI2_Config>:
TI2_Config():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3101
* Output         : None
* Return         : None
*******************************************************************************/
static void TI2_Config(TIM_TypeDef* TIMx, u16 TIM_ICPolarity, u16 TIM_ICSelection,
                       u16 TIM_ICFilter)
{
   0:	b430      	push	{r4, r5}
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3105
  u16 tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
   2:	8c04      	ldrh	r4, [r0, #32]
   4:	f024 0410 	bic.w	r4, r4, #16
   8:	ea4f 4404 	mov.w	r4, r4, lsl #16
   c:	ea4f 4414 	mov.w	r4, r4, lsr #16
  10:	8404      	strh	r4, [r0, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3107

  tmpccmr1 = TIMx->CCMR1;
  12:	8b04      	ldrh	r4, [r0, #24]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3108
  tmpccer = TIMx->CCER;
  14:	8c05      	ldrh	r5, [r0, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3112
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  16:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  1a:	ea4f 5404 	mov.w	r4, r4, lsl #20
  1e:	ea4f 5414 	mov.w	r4, r4, lsr #20
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3113
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  22:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3114
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);
  26:	ea44 3403 	orr.w	r4, r4, r3, lsl #12
  2a:	b2a4      	uxth	r4, r4
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3117

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  2c:	f025 0520 	bic.w	r5, r5, #32
  30:	ea4f 4505 	mov.w	r5, r5, lsl #16
  34:	ea4f 4515 	mov.w	r5, r5, lsr #16
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3118
  tmpccer |=  tmp | CCER_CC2E_Set;
  38:	f045 0510 	orr.w	r5, r5, #16
  3c:	ea45 1501 	orr.w	r5, r5, r1, lsl #4
  40:	b2ad      	uxth	r5, r5
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3121

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
  42:	8304      	strh	r4, [r0, #24]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3122
  TIMx->CCER = tmpccer;
  44:	8405      	strh	r5, [r0, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3123
}
  46:	bc30      	pop	{r4, r5}
  48:	4770      	bx	lr
  4a:	bf00      	nop

Disassembly of section .text.TIM_DeInit:

00000000 <TIM_DeInit>:
TIM_DeInit():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:135
* Input          : - TIMx: where x can be 1 to 8 to select the TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_DeInit(TIM_TypeDef* TIMx)
{
   0:	b508      	push	{r3, lr}
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:139
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  switch (*(u32*)&TIMx)
   2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   6:	f2c4 0300 	movt	r3, #16384	; 0x4000
   a:	4298      	cmp	r0, r3
   c:	d069      	beq.n	e2 <TIM_DeInit+0xe2>
   e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  12:	f2c4 0300 	movt	r3, #16384	; 0x4000
  16:	4298      	cmp	r0, r3
  18:	d810      	bhi.n	3c <TIM_DeInit+0x3c>
  1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  1e:	f2c4 0300 	movt	r3, #16384	; 0x4000
  22:	4298      	cmp	r0, r3
  24:	d043      	beq.n	ae <TIM_DeInit+0xae>
  26:	f44f 6300 	mov.w	r3, #2048	; 0x800
  2a:	f2c4 0300 	movt	r3, #16384	; 0x4000
  2e:	4298      	cmp	r0, r3
  30:	d04a      	beq.n	c8 <TIM_DeInit+0xc8>
  32:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  36:	f040 8087 	bne.w	148 <TIM_DeInit+0x148>
  3a:	e02c      	b.n	96 <TIM_DeInit+0x96>
  3c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  40:	f2c4 0300 	movt	r3, #16384	; 0x4000
  44:	4298      	cmp	r0, r3
  46:	d066      	beq.n	116 <TIM_DeInit+0x116>
  48:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  4c:	f2c4 0300 	movt	r3, #16384	; 0x4000
  50:	4298      	cmp	r0, r3
  52:	d806      	bhi.n	62 <TIM_DeInit+0x62>
  54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  58:	f2c4 0300 	movt	r3, #16384	; 0x4000
  5c:	4298      	cmp	r0, r3
  5e:	d173      	bne.n	148 <TIM_DeInit+0x148>
  60:	e04c      	b.n	fc <TIM_DeInit+0xfc>
  62:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
  66:	f2c4 0301 	movt	r3, #16385	; 0x4001
  6a:	4298      	cmp	r0, r3
  6c:	d006      	beq.n	7c <TIM_DeInit+0x7c>
  6e:	f44f 5350 	mov.w	r3, #13312	; 0x3400
  72:	f2c4 0301 	movt	r3, #16385	; 0x4001
  76:	4298      	cmp	r0, r3
  78:	d166      	bne.n	148 <TIM_DeInit+0x148>
  7a:	e059      	b.n	130 <TIM_DeInit+0x130>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:142
  {
    case TIM1_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
  7c:	f44f 6000 	mov.w	r0, #2048	; 0x800
  80:	f04f 0101 	mov.w	r1, #1
  84:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:143
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  88:	f44f 6000 	mov.w	r0, #2048	; 0x800
  8c:	f04f 0100 	mov.w	r1, #0
  90:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:144
      break; 
  94:	bd08      	pop	{r3, pc}
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:147
      
    case TIM2_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
  96:	f04f 0001 	mov.w	r0, #1
  9a:	4601      	mov	r1, r0
  9c:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:148
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  a0:	f04f 0001 	mov.w	r0, #1
  a4:	f04f 0100 	mov.w	r1, #0
  a8:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:149
      break;
  ac:	bd08      	pop	{r3, pc}
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:152
 
    case TIM3_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
  ae:	f04f 0002 	mov.w	r0, #2
  b2:	f04f 0101 	mov.w	r1, #1
  b6:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:153
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  ba:	f04f 0002 	mov.w	r0, #2
  be:	f04f 0100 	mov.w	r1, #0
  c2:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:154
      break;
  c6:	bd08      	pop	{r3, pc}
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:157
 
    case TIM4_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
  c8:	f04f 0004 	mov.w	r0, #4
  cc:	f04f 0101 	mov.w	r1, #1
  d0:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:158
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  d4:	f04f 0004 	mov.w	r0, #4
  d8:	f04f 0100 	mov.w	r1, #0
  dc:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:159
      break;
  e0:	bd08      	pop	{r3, pc}
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:162
      
    case TIM5_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
  e2:	f04f 0008 	mov.w	r0, #8
  e6:	f04f 0101 	mov.w	r1, #1
  ea:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:163
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  ee:	f04f 0008 	mov.w	r0, #8
  f2:	f04f 0100 	mov.w	r1, #0
  f6:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:164
      break;
  fa:	bd08      	pop	{r3, pc}
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:167
      
    case TIM6_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
  fc:	f04f 0010 	mov.w	r0, #16
 100:	f04f 0101 	mov.w	r1, #1
 104:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:168
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 108:	f04f 0010 	mov.w	r0, #16
 10c:	f04f 0100 	mov.w	r1, #0
 110:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:169
      break;
 114:	bd08      	pop	{r3, pc}
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:172
      
    case TIM7_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 116:	f04f 0020 	mov.w	r0, #32
 11a:	f04f 0101 	mov.w	r1, #1
 11e:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:173
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 122:	f04f 0020 	mov.w	r0, #32
 126:	f04f 0100 	mov.w	r1, #0
 12a:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:174
      break;
 12e:	bd08      	pop	{r3, pc}
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:177
      
    case TIM8_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 130:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 134:	f04f 0101 	mov.w	r1, #1
 138:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:178
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 13c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 140:	f04f 0100 	mov.w	r1, #0
 144:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
 148:	bd08      	pop	{r3, pc}
 14a:	bf00      	nop

Disassembly of section .text.TIM_TimeBaseInit:

00000000 <TIM_TimeBaseInit>:
TIM_TimeBaseInit():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:206
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  /* Select the Counter Mode and set the clock division */
  TIMx->CR1 &= CR1_CKD_Mask & CR1_CounterMode_Mask;
   0:	8803      	ldrh	r3, [r0, #0]
   2:	f003 038f 	and.w	r3, r3, #143	; 0x8f
   6:	8003      	strh	r3, [r0, #0]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:207
  TIMx->CR1 |= (u32)TIM_TimeBaseInitStruct->TIM_ClockDivision |
   8:	8803      	ldrh	r3, [r0, #0]
   a:	b29b      	uxth	r3, r3
   c:	88ca      	ldrh	r2, [r1, #6]
   e:	4313      	orrs	r3, r2
  10:	884a      	ldrh	r2, [r1, #2]
  12:	4313      	orrs	r3, r2
  14:	b29b      	uxth	r3, r3
  16:	8003      	strh	r3, [r0, #0]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:210
                TIM_TimeBaseInitStruct->TIM_CounterMode;
  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
  18:	888b      	ldrh	r3, [r1, #4]
  1a:	8583      	strh	r3, [r0, #44]	; 0x2c
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:213

  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
  1c:	880b      	ldrh	r3, [r1, #0]
  1e:	8503      	strh	r3, [r0, #40]	; 0x28
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:216

  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;
  20:	f04f 0301 	mov.w	r3, #1
  24:	8283      	strh	r3, [r0, #20]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:218
    
  if (((*(u32*)&TIMx) == TIM1_BASE) || ((*(u32*)&TIMx) == TIM8_BASE))  
  26:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
  2a:	f2c4 0301 	movt	r3, #16385	; 0x4001
  2e:	f44f 5250 	mov.w	r2, #13312	; 0x3400
  32:	f2c4 0201 	movt	r2, #16385	; 0x4001
  36:	4290      	cmp	r0, r2
  38:	bf14      	ite	ne
  3a:	2200      	movne	r2, #0
  3c:	2201      	moveq	r2, #1
  3e:	4298      	cmp	r0, r3
  40:	bf14      	ite	ne
  42:	4613      	movne	r3, r2
  44:	f042 0301 	orreq.w	r3, r2, #1
  48:	b10b      	cbz	r3, 4e <TIM_TimeBaseInit+0x4e>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:221
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
  4a:	7a0b      	ldrb	r3, [r1, #8]
  4c:	8603      	strh	r3, [r0, #48]	; 0x30
  4e:	4770      	bx	lr

Disassembly of section .text.TIM_OC1Init:

00000000 <TIM_OC1Init>:
TIM_OC1Init():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:238
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
   0:	b470      	push	{r4, r5, r6}
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:248
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
   2:	8c03      	ldrh	r3, [r0, #32]
   4:	f023 0301 	bic.w	r3, r3, #1
   8:	ea4f 4303 	mov.w	r3, r3, lsl #16
   c:	ea4f 4313 	mov.w	r3, r3, lsr #16
  10:	8403      	strh	r3, [r0, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:251
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  12:	8c03      	ldrh	r3, [r0, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:254

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  14:	8884      	ldrh	r4, [r0, #4]
  16:	b2a4      	uxth	r4, r4
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:257
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
  18:	8b02      	ldrh	r2, [r0, #24]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:260
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC13M_Mask;
  1a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  1e:	ea4f 4202 	mov.w	r2, r2, lsl #16
  22:	ea4f 4212 	mov.w	r2, r2, lsr #16
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:263
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  26:	880d      	ldrh	r5, [r1, #0]
  28:	432a      	orrs	r2, r5
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:266
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC1P_Reset;
  2a:	f023 0302 	bic.w	r3, r3, #2
  2e:	ea4f 4303 	mov.w	r3, r3, lsl #16
  32:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:269

  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  36:	884e      	ldrh	r6, [r1, #2]
  38:	890d      	ldrh	r5, [r1, #8]
  3a:	ea46 0505 	orr.w	r5, r6, r5
  3e:	b2ad      	uxth	r5, r5
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:272
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
  40:	ea45 0303 	orr.w	r3, r5, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:275
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
  44:	88cd      	ldrh	r5, [r1, #6]
  46:	8685      	strh	r5, [r0, #52]	; 0x34
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:277
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
  48:	f44f 5530 	mov.w	r5, #11264	; 0x2c00
  4c:	f2c4 0501 	movt	r5, #16385	; 0x4001
  50:	f44f 5650 	mov.w	r6, #13312	; 0x3400
  54:	f2c4 0601 	movt	r6, #16385	; 0x4001
  58:	42b0      	cmp	r0, r6
  5a:	bf14      	ite	ne
  5c:	2600      	movne	r6, #0
  5e:	2601      	moveq	r6, #1
  60:	42a8      	cmp	r0, r5
  62:	bf14      	ite	ne
  64:	4635      	movne	r5, r6
  66:	f046 0501 	orreq.w	r5, r6, #1
  6a:	b1a5      	cbz	r5, 96 <TIM_OC1Init+0x96>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:285
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC1NP_Reset;
  6c:	f64f 75f7 	movw	r5, #65527	; 0xfff7
  70:	ea03 0505 	and.w	r5, r3, r5
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:288

    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
  74:	894b      	ldrh	r3, [r1, #10]
  76:	431d      	orrs	r5, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:291

    /* Reset the Output N State */
    tmpccer &= CCER_CC1NE_Reset;
  78:	f64f 73fb 	movw	r3, #65531	; 0xfffb
  7c:	ea05 0303 	and.w	r3, r5, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:294
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
  80:	888d      	ldrh	r5, [r1, #4]
  82:	432b      	orrs	r3, r5
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:298

    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS1_Reset;
    tmpcr2 &= CR2_OIS1N_Reset;
  84:	f647 45ff 	movw	r5, #31999	; 0x7cff
  88:	ea04 0505 	and.w	r5, r4, r5
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:301

    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
  8c:	89cc      	ldrh	r4, [r1, #14]
  8e:	8989      	ldrh	r1, [r1, #12]
  90:	430c      	orrs	r4, r1
  92:	b2a4      	uxth	r4, r4
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:304

    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
  94:	432c      	orrs	r4, r5
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:307
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  96:	8084      	strh	r4, [r0, #4]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:310
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  98:	8302      	strh	r2, [r0, #24]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:313
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
  9a:	8403      	strh	r3, [r0, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:314
}
  9c:	bc70      	pop	{r4, r5, r6}
  9e:	4770      	bx	lr

Disassembly of section .text.TIM_OC2Init:

00000000 <TIM_OC2Init>:
TIM_OC2Init():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:329
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
   0:	b470      	push	{r4, r5, r6}
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:339
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
   2:	8c03      	ldrh	r3, [r0, #32]
   4:	f023 0310 	bic.w	r3, r3, #16
   8:	ea4f 4303 	mov.w	r3, r3, lsl #16
   c:	ea4f 4313 	mov.w	r3, r3, lsr #16
  10:	8403      	strh	r3, [r0, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:342
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  12:	8c03      	ldrh	r3, [r0, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:345

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  14:	8884      	ldrh	r4, [r0, #4]
  16:	b2a4      	uxth	r4, r4
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:348
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
  18:	8b02      	ldrh	r2, [r0, #24]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:351
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
  1a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  1e:	ea4f 4202 	mov.w	r2, r2, lsl #16
  22:	ea4f 4212 	mov.w	r2, r2, lsr #16
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:354
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
  26:	880d      	ldrh	r5, [r1, #0]
  28:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  2c:	b292      	uxth	r2, r2
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:357
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC2P_Reset;
  2e:	f023 0320 	bic.w	r3, r3, #32
  32:	ea4f 4303 	mov.w	r3, r3, lsl #16
  36:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:360

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  3a:	890d      	ldrh	r5, [r1, #8]
  3c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:363
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 4);
  40:	884d      	ldrh	r5, [r1, #2]
  42:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  46:	b29b      	uxth	r3, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:366
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
  48:	88cd      	ldrh	r5, [r1, #6]
  4a:	8705      	strh	r5, [r0, #56]	; 0x38
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:368
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
  4c:	f44f 5530 	mov.w	r5, #11264	; 0x2c00
  50:	f2c4 0501 	movt	r5, #16385	; 0x4001
  54:	f44f 5650 	mov.w	r6, #13312	; 0x3400
  58:	f2c4 0601 	movt	r6, #16385	; 0x4001
  5c:	42b0      	cmp	r0, r6
  5e:	bf14      	ite	ne
  60:	2600      	movne	r6, #0
  62:	2601      	moveq	r6, #1
  64:	42a8      	cmp	r0, r5
  66:	bf14      	ite	ne
  68:	4635      	movne	r5, r6
  6a:	f046 0501 	orreq.w	r5, r6, #1
  6e:	b1cd      	cbz	r5, a4 <TIM_OC2Init+0xa4>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:376
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC2NP_Reset;
  70:	f64f 757f 	movw	r5, #65407	; 0xff7f
  74:	ea03 0505 	and.w	r5, r3, r5
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:379

    /* Set the Output N Polarity */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
  78:	894b      	ldrh	r3, [r1, #10]
  7a:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:382

    /* Reset the Output N State */
    tmpccer &= CCER_CC2NE_Reset;
  7e:	f64f 73bf 	movw	r3, #65471	; 0xffbf
  82:	ea05 0303 	and.w	r3, r5, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:385
    
    /* Set the Output N State */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 4);
  86:	888d      	ldrh	r5, [r1, #4]
  88:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  8c:	b29b      	uxth	r3, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:389

    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS2_Reset;
    tmpcr2 &= CR2_OIS2N_Reset;
  8e:	f247 35ff 	movw	r5, #29695	; 0x73ff
  92:	ea04 0505 	and.w	r5, r4, r5
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:392

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 2);
  96:	898c      	ldrh	r4, [r1, #12]
  98:	ea45 0584 	orr.w	r5, r5, r4, lsl #2
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:395

    /* Set the Output N Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
  9c:	89cc      	ldrh	r4, [r1, #14]
  9e:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  a2:	b2a4      	uxth	r4, r4
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:399
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  a4:	8084      	strh	r4, [r0, #4]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:402
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  a6:	8302      	strh	r2, [r0, #24]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:405
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
  a8:	8403      	strh	r3, [r0, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:406
}
  aa:	bc70      	pop	{r4, r5, r6}
  ac:	4770      	bx	lr
  ae:	bf00      	nop

Disassembly of section .text.TIM_OC3Init:

00000000 <TIM_OC3Init>:
TIM_OC3Init():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:421
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
   0:	b470      	push	{r4, r5, r6}
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:431
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
   2:	8c03      	ldrh	r3, [r0, #32]
   4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   8:	ea4f 4303 	mov.w	r3, r3, lsl #16
   c:	ea4f 4313 	mov.w	r3, r3, lsr #16
  10:	8403      	strh	r3, [r0, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:434
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  12:	8c03      	ldrh	r3, [r0, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:437

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  14:	8884      	ldrh	r4, [r0, #4]
  16:	b2a4      	uxth	r4, r4
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:440
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
  18:	8b82      	ldrh	r2, [r0, #28]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:443
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC13M_Mask;
  1a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  1e:	ea4f 4202 	mov.w	r2, r2, lsl #16
  22:	ea4f 4212 	mov.w	r2, r2, lsr #16
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:446
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  26:	880d      	ldrh	r5, [r1, #0]
  28:	432a      	orrs	r2, r5
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:449
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC3P_Reset;
  2a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  2e:	ea4f 4303 	mov.w	r3, r3, lsl #16
  32:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:452

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  36:	890d      	ldrh	r5, [r1, #8]
  38:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:455
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 8);
  3c:	884d      	ldrh	r5, [r1, #2]
  3e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  42:	b29b      	uxth	r3, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:458
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
  44:	88cd      	ldrh	r5, [r1, #6]
  46:	8785      	strh	r5, [r0, #60]	; 0x3c
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:460
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
  48:	f44f 5530 	mov.w	r5, #11264	; 0x2c00
  4c:	f2c4 0501 	movt	r5, #16385	; 0x4001
  50:	f44f 5650 	mov.w	r6, #13312	; 0x3400
  54:	f2c4 0601 	movt	r6, #16385	; 0x4001
  58:	42b0      	cmp	r0, r6
  5a:	bf14      	ite	ne
  5c:	2600      	movne	r6, #0
  5e:	2601      	moveq	r6, #1
  60:	42a8      	cmp	r0, r5
  62:	bf14      	ite	ne
  64:	4635      	movne	r5, r6
  66:	f046 0501 	orreq.w	r5, r6, #1
  6a:	b1cd      	cbz	r5, a0 <TIM_OC3Init+0xa0>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:468
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC3NP_Reset;
  6c:	f24f 75ff 	movw	r5, #63487	; 0xf7ff
  70:	ea03 0505 	and.w	r5, r3, r5
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:471

    /* Set the Output N Polarity */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
  74:	894b      	ldrh	r3, [r1, #10]
  76:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:474

    /* Reset the Output N State */
    tmpccer &= CCER_CC3NE_Reset;
  7a:	f64f 33ff 	movw	r3, #64511	; 0xfbff
  7e:	ea05 0303 	and.w	r3, r5, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:477
    
    /* Set the Output N State */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 8);
  82:	888d      	ldrh	r5, [r1, #4]
  84:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  88:	b29b      	uxth	r3, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:481

    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS3_Reset;
    tmpcr2 &= CR2_OIS3N_Reset;
  8a:	f644 75ff 	movw	r5, #20479	; 0x4fff
  8e:	ea04 0505 	and.w	r5, r4, r5
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:484

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 4);
  92:	898c      	ldrh	r4, [r1, #12]
  94:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:487

    /* Set the Output N Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
  98:	89cc      	ldrh	r4, [r1, #14]
  9a:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  9e:	b2a4      	uxth	r4, r4
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:491
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  a0:	8084      	strh	r4, [r0, #4]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:494
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  a2:	8382      	strh	r2, [r0, #28]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:497
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
  a4:	8403      	strh	r3, [r0, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:498
}
  a6:	bc70      	pop	{r4, r5, r6}
  a8:	4770      	bx	lr
  aa:	bf00      	nop

Disassembly of section .text.TIM_OC4Init:

00000000 <TIM_OC4Init>:
TIM_OC4Init():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:513
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
   0:	b470      	push	{r4, r5, r6}
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:523
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
   2:	8c03      	ldrh	r3, [r0, #32]
   4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8:	ea4f 4303 	mov.w	r3, r3, lsl #16
   c:	ea4f 4313 	mov.w	r3, r3, lsr #16
  10:	8403      	strh	r3, [r0, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:526
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  12:	8c03      	ldrh	r3, [r0, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:529

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  14:	8884      	ldrh	r4, [r0, #4]
  16:	b2a4      	uxth	r4, r4
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:532
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
  18:	8b82      	ldrh	r2, [r0, #28]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:535
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
  1a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  1e:	ea4f 4202 	mov.w	r2, r2, lsl #16
  22:	ea4f 4212 	mov.w	r2, r2, lsr #16
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:538
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
  26:	880d      	ldrh	r5, [r1, #0]
  28:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  2c:	b292      	uxth	r2, r2
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:541
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC4P_Reset;
  2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  32:	ea4f 4303 	mov.w	r3, r3, lsl #16
  36:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:544

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  3a:	890d      	ldrh	r5, [r1, #8]
  3c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:547
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 12);
  40:	884d      	ldrh	r5, [r1, #2]
  42:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  46:	b29b      	uxth	r3, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:550
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
  48:	88cd      	ldrh	r5, [r1, #6]
  4a:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:552
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
  4e:	f44f 5530 	mov.w	r5, #11264	; 0x2c00
  52:	f2c4 0501 	movt	r5, #16385	; 0x4001
  56:	f44f 5650 	mov.w	r6, #13312	; 0x3400
  5a:	f2c4 0601 	movt	r6, #16385	; 0x4001
  5e:	42b0      	cmp	r0, r6
  60:	bf14      	ite	ne
  62:	2600      	movne	r6, #0
  64:	2601      	moveq	r6, #1
  66:	42a8      	cmp	r0, r5
  68:	bf14      	ite	ne
  6a:	4635      	movne	r5, r6
  6c:	f046 0501 	orreq.w	r5, r6, #1
  70:	b13d      	cbz	r5, 82 <TIM_OC4Init+0x82>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:557
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));

    /* Reset the Ouput Compare IDLE State */
    tmpcr2 &= CR2_OIS4_Reset;
  72:	ea4f 4484 	mov.w	r4, r4, lsl #18
  76:	ea4f 4494 	mov.w	r4, r4, lsr #18
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:560

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 6);
  7a:	8989      	ldrh	r1, [r1, #12]
  7c:	ea44 1481 	orr.w	r4, r4, r1, lsl #6
  80:	b2a4      	uxth	r4, r4
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:564
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  82:	8084      	strh	r4, [r0, #4]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:567
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
  84:	8382      	strh	r2, [r0, #28]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:570
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
  86:	8403      	strh	r3, [r0, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:571
}
  88:	bc70      	pop	{r4, r5, r6}
  8a:	4770      	bx	lr

Disassembly of section .text.TIM_BDTRConfig:

00000000 <TIM_BDTRConfig>:
TIM_BDTRConfig():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:735
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  TIMx->BDTR = (u32)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
   0:	884a      	ldrh	r2, [r1, #2]
   2:	880b      	ldrh	r3, [r1, #0]
   4:	ea42 0303 	orr.w	r3, r2, r3
   8:	888a      	ldrh	r2, [r1, #4]
   a:	4313      	orrs	r3, r2
   c:	88ca      	ldrh	r2, [r1, #6]
   e:	4313      	orrs	r3, r2
  10:	890a      	ldrh	r2, [r1, #8]
  12:	4313      	orrs	r3, r2
  14:	894a      	ldrh	r2, [r1, #10]
  16:	4313      	orrs	r3, r2
  18:	898a      	ldrh	r2, [r1, #12]
  1a:	4313      	orrs	r3, r2
  1c:	b29b      	uxth	r3, r3
  1e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:740
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;

}
  22:	4770      	bx	lr

Disassembly of section .text.TIM_TimeBaseStructInit:

00000000 <TIM_TimeBaseStructInit>:
TIM_TimeBaseStructInit():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:753
* Return         : None
*******************************************************************************/
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
   0:	f04f 33ff 	mov.w	r3, #4294967295
   4:	8083      	strh	r3, [r0, #4]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:754
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
   6:	f04f 0300 	mov.w	r3, #0
   a:	8003      	strh	r3, [r0, #0]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:755
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
   c:	80c3      	strh	r3, [r0, #6]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:756
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
   e:	8043      	strh	r3, [r0, #2]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:757
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
  10:	7203      	strb	r3, [r0, #8]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:758
}
  12:	4770      	bx	lr

Disassembly of section .text.TIM_OCStructInit:

00000000 <TIM_OCStructInit>:
TIM_OCStructInit():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:771
* Return         : None
*******************************************************************************/
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
   0:	f04f 0300 	mov.w	r3, #0
   4:	8003      	strh	r3, [r0, #0]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:772
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
   6:	8043      	strh	r3, [r0, #2]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:773
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
   8:	8083      	strh	r3, [r0, #4]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:774
  TIM_OCInitStruct->TIM_Pulse = 0x0000;
   a:	80c3      	strh	r3, [r0, #6]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:775
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
   c:	8103      	strh	r3, [r0, #8]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:776
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
   e:	8143      	strh	r3, [r0, #10]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:777
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
  10:	8183      	strh	r3, [r0, #12]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:778
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
  12:	81c3      	strh	r3, [r0, #14]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:779
}
  14:	4770      	bx	lr
  16:	bf00      	nop

Disassembly of section .text.TIM_ICStructInit:

00000000 <TIM_ICStructInit>:
TIM_ICStructInit():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:792
* Return         : None
*******************************************************************************/
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
   0:	f04f 0300 	mov.w	r3, #0
   4:	8003      	strh	r3, [r0, #0]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:793
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
   6:	8043      	strh	r3, [r0, #2]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:794
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
   8:	f04f 0201 	mov.w	r2, #1
   c:	8082      	strh	r2, [r0, #4]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:795
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
   e:	80c3      	strh	r3, [r0, #6]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:796
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
  10:	8103      	strh	r3, [r0, #8]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:797
}
  12:	4770      	bx	lr

Disassembly of section .text.TIM_BDTRStructInit:

00000000 <TIM_BDTRStructInit>:
TIM_BDTRStructInit():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:810
* Return         : None
*******************************************************************************/
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
   0:	f04f 0300 	mov.w	r3, #0
   4:	8003      	strh	r3, [r0, #0]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:811
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
   6:	8043      	strh	r3, [r0, #2]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:812
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
   8:	8083      	strh	r3, [r0, #4]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:813
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
   a:	80c3      	strh	r3, [r0, #6]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:814
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
   c:	8103      	strh	r3, [r0, #8]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:815
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
   e:	8143      	strh	r3, [r0, #10]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:816
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
  10:	8183      	strh	r3, [r0, #12]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:817
}
  12:	4770      	bx	lr

Disassembly of section .text.TIM_Cmd:

00000000 <TIM_Cmd>:
TIM_Cmd():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:834
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
   0:	b129      	cbz	r1, e <TIM_Cmd+0xe>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:837
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= CR1_CEN_Set;
   2:	8803      	ldrh	r3, [r0, #0]
   4:	b29b      	uxth	r3, r3
   6:	f043 0301 	orr.w	r3, r3, #1
   a:	8003      	strh	r3, [r0, #0]
   c:	4770      	bx	lr
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:842
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= CR1_CEN_Reset;
   e:	8803      	ldrh	r3, [r0, #0]
  10:	f023 0301 	bic.w	r3, r3, #1
  14:	ea4f 5383 	mov.w	r3, r3, lsl #22
  18:	ea4f 5393 	mov.w	r3, r3, lsr #22
  1c:	8003      	strh	r3, [r0, #0]
  1e:	4770      	bx	lr

Disassembly of section .text.TIM_CtrlPWMOutputs:

00000000 <TIM_CtrlPWMOutputs>:
TIM_CtrlPWMOutputs():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:861
{
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
   0:	b149      	cbz	r1, 16 <TIM_CtrlPWMOutputs+0x16>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:864
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= BDTR_MOE_Set;
   2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
   a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
   e:	b29b      	uxth	r3, r3
  10:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  14:	4770      	bx	lr
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:869
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= BDTR_MOE_Reset;
  16:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
  1a:	ea4f 4343 	mov.w	r3, r3, lsl #17
  1e:	ea4f 4353 	mov.w	r3, r3, lsr #17
  22:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  26:	4770      	bx	lr

Disassembly of section .text.TIM_ITConfig:

00000000 <TIM_ITConfig>:
TIM_ITConfig():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:901
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_TIM_PERIPH_IT((TIMx), (TIM_IT)));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
   0:	b122      	cbz	r2, c <TIM_ITConfig+0xc>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:904
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
   2:	8983      	ldrh	r3, [r0, #12]
   4:	b29b      	uxth	r3, r3
   6:	4319      	orrs	r1, r3
   8:	8181      	strh	r1, [r0, #12]
   a:	4770      	bx	lr
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:909
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (u16)~TIM_IT;
   c:	8983      	ldrh	r3, [r0, #12]
   e:	b29b      	uxth	r3, r3
  10:	ea23 0101 	bic.w	r1, r3, r1
  14:	8181      	strh	r1, [r0, #12]
  16:	4770      	bx	lr

Disassembly of section .text.TIM_GenerateEvent:

00000000 <TIM_GenerateEvent>:
TIM_GenerateEvent():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:936
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
  assert_param(IS_TIM_PERIPH_EVENT((TIMx), (TIM_EventSource)));

  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
   0:	8281      	strh	r1, [r0, #20]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:937
}
   2:	4770      	bx	lr

Disassembly of section .text.TIM_DMAConfig:

00000000 <TIM_DMAConfig>:
TIM_DMAConfig():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:967
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase));
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
   0:	430a      	orrs	r2, r1
   2:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:968
}
   6:	4770      	bx	lr

Disassembly of section .text.TIM_DMACmd:

00000000 <TIM_DMACmd>:
TIM_DMACmd():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:996
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_TIM_PERIPH_DMA(TIMx, TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
   0:	b122      	cbz	r2, c <TIM_DMACmd+0xc>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:999
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
   2:	8983      	ldrh	r3, [r0, #12]
   4:	b29b      	uxth	r3, r3
   6:	4319      	orrs	r1, r3
   8:	8181      	strh	r1, [r0, #12]
   a:	4770      	bx	lr
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1004
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (u16)~TIM_DMASource;
   c:	8983      	ldrh	r3, [r0, #12]
   e:	b29b      	uxth	r3, r3
  10:	ea23 0101 	bic.w	r1, r3, r1
  14:	8181      	strh	r1, [r0, #12]
  16:	4770      	bx	lr

Disassembly of section .text.TIM_InternalClockConfig:

00000000 <TIM_InternalClockConfig>:
TIM_InternalClockConfig():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1022
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  SMCR_SMS_Mask;
   0:	8903      	ldrh	r3, [r0, #8]
   2:	f023 0307 	bic.w	r3, r3, #7
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   e:	8103      	strh	r3, [r0, #8]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1023
}
  10:	4770      	bx	lr
  12:	bf00      	nop

Disassembly of section .text.TIM_ETRConfig:

00000000 <TIM_ETRConfig>:
TIM_ETRConfig():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1203
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_ETRConfig(TIM_TypeDef* TIMx, u16 TIM_ExtTRGPrescaler, u16 TIM_ExtTRGPolarity,
                   u16 ExtTRGFilter)
{
   0:	b410      	push	{r4}
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1212
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
   2:	8904      	ldrh	r4, [r0, #8]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1215

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_Mask;
   4:	b2e4      	uxtb	r4, r4
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1218

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= TIM_ExtTRGPrescaler | TIM_ExtTRGPolarity | (u16)(ExtTRGFilter << 8);
   6:	ea41 0404 	orr.w	r4, r1, r4
   a:	ea42 0404 	orr.w	r4, r2, r4
   e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  12:	b2a4      	uxth	r4, r4
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1221

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
  14:	8104      	strh	r4, [r0, #8]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1222
}
  16:	bc10      	pop	{r4}
  18:	4770      	bx	lr
  1a:	bf00      	nop

Disassembly of section .text.TIM_ETRClockMode2Config:

00000000 <TIM_ETRClockMode2Config>:
TIM_ETRClockMode2Config():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1167
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, u16 TIM_ExtTRGPrescaler, 
                             u16 TIM_ExtTRGPolarity, u16 ExtTRGFilter)
{
   0:	b510      	push	{r4, lr}
   2:	4604      	mov	r4, r0
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1175
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
   4:	f7ff fffe 	bl	0 <TIM_ETRClockMode2Config>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1178

  /* Enable the External clock mode2 */
  TIMx->SMCR |= SMCR_ECE_Set;
   8:	8923      	ldrh	r3, [r4, #8]
   a:	b29b      	uxth	r3, r3
   c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  10:	8123      	strh	r3, [r4, #8]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1179
}
  12:	bd10      	pop	{r4, pc}

Disassembly of section .text.TIM_ETRClockMode1Config:

00000000 <TIM_ETRClockMode1Config>:
TIM_ETRClockMode1Config():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1117
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, u16 TIM_ExtTRGPrescaler, u16 TIM_ExtTRGPolarity,
                             u16 ExtTRGFilter)
{
   0:	b510      	push	{r4, lr}
   2:	4604      	mov	r4, r0
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1127
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
   4:	f7ff fffe 	bl	0 <TIM_ETRClockMode1Config>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1130
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
   8:	8923      	ldrh	r3, [r4, #8]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1135

  /* Reset the SMS Bits */
  tmpsmcr &= SMCR_SMS_Mask;
  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
   a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
   e:	ea4f 4303 	mov.w	r3, r3, lsl #16
  12:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1139

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= SMCR_TS_Mask;
  tmpsmcr |= TIM_TS_ETRF;
  16:	f043 0377 	orr.w	r3, r3, #119	; 0x77
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1142

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
  1a:	8123      	strh	r3, [r4, #8]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1143
}
  1c:	bd10      	pop	{r4, pc}
  1e:	bf00      	nop

Disassembly of section .text.TIM_PrescalerConfig:

00000000 <TIM_PrescalerConfig>:
TIM_PrescalerConfig():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1245
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));

  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
   0:	8501      	strh	r1, [r0, #40]	; 0x28
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1248

  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
   2:	8282      	strh	r2, [r0, #20]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1249
}
   4:	4770      	bx	lr
   6:	bf00      	nop

Disassembly of section .text.TIM_CounterModeConfig:

00000000 <TIM_CounterModeConfig>:
TIM_CounterModeConfig():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1274

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
   0:	8803      	ldrh	r3, [r0, #0]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1277

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= CR1_CounterMode_Mask;
   2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   6:	ea4f 5383 	mov.w	r3, r3, lsl #22
   a:	ea4f 5393 	mov.w	r3, r3, lsr #22
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1280

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
   e:	ea41 0303 	orr.w	r3, r1, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1283

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
  12:	8003      	strh	r3, [r0, #0]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1284
}
  14:	4770      	bx	lr
  16:	bf00      	nop

Disassembly of section .text.TIM_SelectInputTrigger:

00000000 <TIM_SelectInputTrigger>:
TIM_SelectInputTrigger():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1313
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
   0:	8903      	ldrh	r3, [r0, #8]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1316

  /* Reset the TS Bits */
  tmpsmcr &= SMCR_TS_Mask;
   2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1319

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
   e:	ea41 0303 	orr.w	r3, r1, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1322

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
  12:	8103      	strh	r3, [r0, #8]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1323
}
  14:	4770      	bx	lr
  16:	bf00      	nop

Disassembly of section .text.TIM_TIxExternalClockConfig:

00000000 <TIM_TIxExternalClockConfig>:
TIM_TIxExternalClockConfig():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1071
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, u16 TIM_TIxExternalCLKSource,
                                u16 TIM_ICPolarity, u16 ICFilter)
{
   0:	b538      	push	{r3, r4, r5, lr}
   2:	4604      	mov	r4, r0
   4:	460d      	mov	r5, r1
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1079
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
   6:	2960      	cmp	r1, #96	; 0x60
   8:	d105      	bne.n	16 <TIM_TIxExternalClockConfig+0x16>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1081
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
   a:	4611      	mov	r1, r2
   c:	f04f 0201 	mov.w	r2, #1
  10:	f7ff fffe 	bl	0 <TIM_TIxExternalClockConfig>
  14:	e004      	b.n	20 <TIM_TIxExternalClockConfig+0x20>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1085
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
  16:	4611      	mov	r1, r2
  18:	f04f 0201 	mov.w	r2, #1
  1c:	f7ff fffe 	bl	0 <TIM_TIxExternalClockConfig>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1089
  }

  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
  20:	4620      	mov	r0, r4
  22:	4629      	mov	r1, r5
  24:	f7ff fffe 	bl	0 <TIM_TIxExternalClockConfig>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1092

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
  28:	8923      	ldrh	r3, [r4, #8]
  2a:	b29b      	uxth	r3, r3
  2c:	f043 0307 	orr.w	r3, r3, #7
  30:	8123      	strh	r3, [r4, #8]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1093
}
  32:	bd38      	pop	{r3, r4, r5, pc}

Disassembly of section .text.TIM_ITRxExternalClockConfig:

00000000 <TIM_ITRxExternalClockConfig>:
TIM_ITRxExternalClockConfig():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1039
*                       - TIM_TS_ITR3: Internal Trigger 3
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, u16 TIM_InputTriggerSource)
{
   0:	b510      	push	{r4, lr}
   2:	4604      	mov	r4, r0
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1045
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
   4:	f7ff fffe 	bl	0 <TIM_ITRxExternalClockConfig>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1048

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
   8:	8923      	ldrh	r3, [r4, #8]
   a:	b29b      	uxth	r3, r3
   c:	f043 0307 	orr.w	r3, r3, #7
  10:	8123      	strh	r3, [r4, #8]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1049
}
  12:	bd10      	pop	{r4, pc}

Disassembly of section .text.TIM_EncoderInterfaceConfig:

00000000 <TIM_EncoderInterfaceConfig>:
TIM_EncoderInterfaceConfig():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1351
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, u16 TIM_EncoderMode,
                                u16 TIM_IC1Polarity, u16 TIM_IC2Polarity)
{
   0:	b470      	push	{r4, r5, r6}
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1363
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
   2:	8904      	ldrh	r4, [r0, #8]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1366

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
   4:	8b06      	ldrh	r6, [r0, #24]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1369

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
   6:	8c05      	ldrh	r5, [r0, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1372

  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
   8:	f024 0407 	bic.w	r4, r4, #7
   c:	ea4f 4404 	mov.w	r4, r4, lsl #16
  10:	ea4f 4414 	mov.w	r4, r4, lsr #16
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1373
  tmpsmcr |= TIM_EncoderMode;
  14:	4321      	orrs	r1, r4
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1376

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
  16:	f426 7640 	bic.w	r6, r6, #768	; 0x300
  1a:	f026 0603 	bic.w	r6, r6, #3
  1e:	ea4f 4606 	mov.w	r6, r6, lsl #16
  22:	ea4f 4616 	mov.w	r6, r6, lsr #16
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1377
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;
  26:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  2a:	f046 0601 	orr.w	r6, r6, #1
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1380

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
  2e:	f025 0522 	bic.w	r5, r5, #34	; 0x22
  32:	ea4f 4505 	mov.w	r5, r5, lsl #16
  36:	ea4f 4515 	mov.w	r5, r5, lsr #16
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1381
  tmpccer |= (TIM_IC1Polarity | (u16)(TIM_IC2Polarity << 4));
  3a:	ea42 0505 	orr.w	r5, r2, r5
  3e:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
  42:	b2ad      	uxth	r5, r5
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1384

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
  44:	8101      	strh	r1, [r0, #8]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1387

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
  46:	8306      	strh	r6, [r0, #24]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1390

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
  48:	8405      	strh	r5, [r0, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1391
}
  4a:	bc70      	pop	{r4, r5, r6}
  4c:	4770      	bx	lr
  4e:	bf00      	nop

Disassembly of section .text.TIM_ForcedOC1Config:

00000000 <TIM_ForcedOC1Config>:
TIM_ForcedOC1Config():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1415

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr1 = TIMx->CCMR1;
   0:	8b03      	ldrh	r3, [r0, #24]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1418

  /* Reset the OC1M Bits */
  tmpccmr1 &= CCMR_OC13M_Mask;
   2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1421

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
   e:	ea41 0303 	orr.w	r3, r1, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1424

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
  12:	8303      	strh	r3, [r0, #24]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1425
}
  14:	4770      	bx	lr
  16:	bf00      	nop

Disassembly of section .text.TIM_ForcedOC2Config:

00000000 <TIM_ForcedOC2Config>:
TIM_ForcedOC2Config():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1449

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr1 = TIMx->CCMR1;
   0:	8b03      	ldrh	r3, [r0, #24]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1452

  /* Reset the OC2M Bits */
  tmpccmr1 &= CCMR_OC24M_Mask;
   2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1455

  /* Configure The Forced output Mode */
  tmpccmr1 |= (u16)(TIM_ForcedAction << 8);
   e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  12:	b29b      	uxth	r3, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1458

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
  14:	8303      	strh	r3, [r0, #24]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1459
}
  16:	4770      	bx	lr

Disassembly of section .text.TIM_ForcedOC3Config:

00000000 <TIM_ForcedOC3Config>:
TIM_ForcedOC3Config():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1483

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
   0:	8b83      	ldrh	r3, [r0, #28]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1486

  /* Reset the OC1M Bits */
  tmpccmr2 &= CCMR_OC13M_Mask;
   2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1489

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
   e:	ea41 0303 	orr.w	r3, r1, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1492

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
  12:	8383      	strh	r3, [r0, #28]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1493
}
  14:	4770      	bx	lr
  16:	bf00      	nop

Disassembly of section .text.TIM_ForcedOC4Config:

00000000 <TIM_ForcedOC4Config>:
TIM_ForcedOC4Config():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1516
  u16 tmpccmr2 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
   0:	8b83      	ldrh	r3, [r0, #28]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1519

  /* Reset the OC2M Bits */
  tmpccmr2 &= CCMR_OC24M_Mask;
   2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1522

  /* Configure The Forced output Mode */
  tmpccmr2 |= (u16)(TIM_ForcedAction << 8);
   e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  12:	b29b      	uxth	r3, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1525

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
  14:	8383      	strh	r3, [r0, #28]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1526
}
  16:	4770      	bx	lr

Disassembly of section .text.TIM_ARRPreloadConfig:

00000000 <TIM_ARRPreloadConfig>:
TIM_ARRPreloadConfig():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1544
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
   0:	b129      	cbz	r1, e <TIM_ARRPreloadConfig+0xe>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1547
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= CR1_ARPE_Set;
   2:	8803      	ldrh	r3, [r0, #0]
   4:	b29b      	uxth	r3, r3
   6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   a:	8003      	strh	r3, [r0, #0]
   c:	4770      	bx	lr
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1552
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= CR1_ARPE_Reset;
   e:	8803      	ldrh	r3, [r0, #0]
  10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  14:	ea4f 5383 	mov.w	r3, r3, lsl #22
  18:	ea4f 5393 	mov.w	r3, r3, lsr #22
  1c:	8003      	strh	r3, [r0, #0]
  1e:	4770      	bx	lr

Disassembly of section .text.TIM_SelectCOM:

00000000 <TIM_SelectCOM>:
TIM_SelectCOM():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1571
{
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
   0:	b129      	cbz	r1, e <TIM_SelectCOM+0xe>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1574
  {
    /* Set the COM Bit */
    TIMx->CR2 |= CR2_CCUS_Set;
   2:	8883      	ldrh	r3, [r0, #4]
   4:	b29b      	uxth	r3, r3
   6:	f043 0304 	orr.w	r3, r3, #4
   a:	8083      	strh	r3, [r0, #4]
   c:	4770      	bx	lr
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1579
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= CR2_CCUS_Reset;
   e:	8883      	ldrh	r3, [r0, #4]
  10:	f023 0304 	bic.w	r3, r3, #4
  14:	ea4f 4303 	mov.w	r3, r3, lsl #16
  18:	ea4f 4313 	mov.w	r3, r3, lsr #16
  1c:	8083      	strh	r3, [r0, #4]
  1e:	4770      	bx	lr

Disassembly of section .text.TIM_SelectCCDMA:

00000000 <TIM_SelectCCDMA>:
TIM_SelectCCDMA():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1599
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
   0:	b129      	cbz	r1, e <TIM_SelectCCDMA+0xe>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1602
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= CR2_CCDS_Set;
   2:	8883      	ldrh	r3, [r0, #4]
   4:	b29b      	uxth	r3, r3
   6:	f043 0308 	orr.w	r3, r3, #8
   a:	8083      	strh	r3, [r0, #4]
   c:	4770      	bx	lr
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1607
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= CR2_CCDS_Reset;
   e:	8883      	ldrh	r3, [r0, #4]
  10:	f023 0308 	bic.w	r3, r3, #8
  14:	ea4f 4303 	mov.w	r3, r3, lsl #16
  18:	ea4f 4313 	mov.w	r3, r3, lsr #16
  1c:	8083      	strh	r3, [r0, #4]
  1e:	4770      	bx	lr

Disassembly of section .text.TIM_CCPreloadControl:

00000000 <TIM_CCPreloadControl>:
TIM_CCPreloadControl():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1627
{ 
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
   0:	b129      	cbz	r1, e <TIM_CCPreloadControl+0xe>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1630
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= CR2_CCPC_Set;
   2:	8883      	ldrh	r3, [r0, #4]
   4:	b29b      	uxth	r3, r3
   6:	f043 0301 	orr.w	r3, r3, #1
   a:	8083      	strh	r3, [r0, #4]
   c:	4770      	bx	lr
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1635
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= CR2_CCPC_Reset;
   e:	8883      	ldrh	r3, [r0, #4]
  10:	f023 0301 	bic.w	r3, r3, #1
  14:	ea4f 4303 	mov.w	r3, r3, lsl #16
  18:	ea4f 4313 	mov.w	r3, r3, lsr #16
  1c:	8083      	strh	r3, [r0, #4]
  1e:	4770      	bx	lr

Disassembly of section .text.TIM_OC1PreloadConfig:

00000000 <TIM_OC1PreloadConfig>:
TIM_OC1PreloadConfig():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1660

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
   0:	8b03      	ldrh	r3, [r0, #24]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1663

  /* Reset the OC1PE Bit */
  tmpccmr1 &= CCMR_OC13PE_Reset;
   2:	f023 0308 	bic.w	r3, r3, #8
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1666

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
   e:	ea41 0303 	orr.w	r3, r1, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1669

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
  12:	8303      	strh	r3, [r0, #24]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1670
}
  14:	4770      	bx	lr
  16:	bf00      	nop

Disassembly of section .text.TIM_OC2PreloadConfig:

00000000 <TIM_OC2PreloadConfig>:
TIM_OC2PreloadConfig():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1693

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
   0:	8b03      	ldrh	r3, [r0, #24]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1696

  /* Reset the OC2PE Bit */
  tmpccmr1 &= CCMR_OC24PE_Reset;
   2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1699

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (u16)(TIM_OCPreload << 8);
   e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  12:	b29b      	uxth	r3, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1702

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
  14:	8303      	strh	r3, [r0, #24]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1703
}
  16:	4770      	bx	lr

Disassembly of section .text.TIM_OC3PreloadConfig:

00000000 <TIM_OC3PreloadConfig>:
TIM_OC3PreloadConfig():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1726

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
   0:	8b83      	ldrh	r3, [r0, #28]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1729

  /* Reset the OC3PE Bit */
  tmpccmr2 &= CCMR_OC13PE_Reset;
   2:	f023 0308 	bic.w	r3, r3, #8
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1732

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
   e:	ea41 0303 	orr.w	r3, r1, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1735

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
  12:	8383      	strh	r3, [r0, #28]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1736
}
  14:	4770      	bx	lr
  16:	bf00      	nop

Disassembly of section .text.TIM_OC4PreloadConfig:

00000000 <TIM_OC4PreloadConfig>:
TIM_OC4PreloadConfig():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1759

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
   0:	8b83      	ldrh	r3, [r0, #28]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1762

  /* Reset the OC4PE Bit */
  tmpccmr2 &= CCMR_OC24PE_Reset;
   2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1765

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (u16)(TIM_OCPreload << 8);
   e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  12:	b29b      	uxth	r3, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1768

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
  14:	8383      	strh	r3, [r0, #28]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1769
}
  16:	4770      	bx	lr

Disassembly of section .text.TIM_OC1FastConfig:

00000000 <TIM_OC1FastConfig>:
TIM_OC1FastConfig():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1792
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
   0:	8b03      	ldrh	r3, [r0, #24]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1795

  /* Reset the OC1FE Bit */
  tmpccmr1 &= CCMR_OC13FE_Reset;
   2:	f023 0304 	bic.w	r3, r3, #4
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1798

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
   e:	ea41 0303 	orr.w	r3, r1, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1801

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
  12:	8303      	strh	r3, [r0, #24]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1802
}
  14:	4770      	bx	lr
  16:	bf00      	nop

Disassembly of section .text.TIM_OC2FastConfig:

00000000 <TIM_OC2FastConfig>:
TIM_OC2FastConfig():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1825
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
   0:	8b03      	ldrh	r3, [r0, #24]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1828

  /* Reset the OC2FE Bit */
  tmpccmr1 &= CCMR_OC24FE_Reset;
   2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1831

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (u16)(TIM_OCFast << 8);
   e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  12:	b29b      	uxth	r3, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1834

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
  14:	8303      	strh	r3, [r0, #24]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1835
}
  16:	4770      	bx	lr

Disassembly of section .text.TIM_OC3FastConfig:

00000000 <TIM_OC3FastConfig>:
TIM_OC3FastConfig():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1858
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
   0:	8b83      	ldrh	r3, [r0, #28]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1861

  /* Reset the OC3FE Bit */
  tmpccmr2 &= CCMR_OC13FE_Reset;
   2:	f023 0304 	bic.w	r3, r3, #4
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1864

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
   e:	ea41 0303 	orr.w	r3, r1, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1867

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
  12:	8383      	strh	r3, [r0, #28]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1868
}
  14:	4770      	bx	lr
  16:	bf00      	nop

Disassembly of section .text.TIM_OC4FastConfig:

00000000 <TIM_OC4FastConfig>:
TIM_OC4FastConfig():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1891
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
   0:	8b83      	ldrh	r3, [r0, #28]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1894

  /* Reset the OC4FE Bit */
  tmpccmr2 &= CCMR_OC24FE_Reset;
   2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1897

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (u16)(TIM_OCFast << 8);
   e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  12:	b29b      	uxth	r3, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1900

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
  14:	8383      	strh	r3, [r0, #28]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1901
}
  16:	4770      	bx	lr

Disassembly of section .text.TIM_ClearOC1Ref:

00000000 <TIM_ClearOC1Ref>:
TIM_ClearOC1Ref():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1923

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
   0:	8b03      	ldrh	r3, [r0, #24]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1926

  /* Reset the OC1CE Bit */
  tmpccmr1 &= CCMR_OC13CE_Reset;
   2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1929

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
   e:	ea41 0303 	orr.w	r3, r1, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1932

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
  12:	8303      	strh	r3, [r0, #24]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1933
}
  14:	4770      	bx	lr
  16:	bf00      	nop

Disassembly of section .text.TIM_ClearOC2Ref:

00000000 <TIM_ClearOC2Ref>:
TIM_ClearOC2Ref():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1955

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
   0:	8b03      	ldrh	r3, [r0, #24]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1958

  /* Reset the OC2CE Bit */
  tmpccmr1 &= CCMR_OC24CE_Reset;
   2:	ea4f 4343 	mov.w	r3, r3, lsl #17
   6:	ea4f 4353 	mov.w	r3, r3, lsr #17
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1961

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (u16)(TIM_OCClear << 8);
   a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   e:	b29b      	uxth	r3, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1964

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
  10:	8303      	strh	r3, [r0, #24]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1965
}
  12:	4770      	bx	lr

Disassembly of section .text.TIM_ClearOC3Ref:

00000000 <TIM_ClearOC3Ref>:
TIM_ClearOC3Ref():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1987

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
   0:	8b83      	ldrh	r3, [r0, #28]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1990

  /* Reset the OC3CE Bit */
  tmpccmr2 &= CCMR_OC13CE_Reset;
   2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1993

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
   e:	ea41 0303 	orr.w	r3, r1, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1996

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
  12:	8383      	strh	r3, [r0, #28]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:1997
}
  14:	4770      	bx	lr
  16:	bf00      	nop

Disassembly of section .text.TIM_ClearOC4Ref:

00000000 <TIM_ClearOC4Ref>:
TIM_ClearOC4Ref():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2019

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
   0:	8b83      	ldrh	r3, [r0, #28]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2022

  /* Reset the OC4CE Bit */
  tmpccmr2 &= CCMR_OC24CE_Reset;
   2:	ea4f 4343 	mov.w	r3, r3, lsl #17
   6:	ea4f 4353 	mov.w	r3, r3, lsr #17
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2025

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (u16)(TIM_OCClear << 8);
   a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   e:	b29b      	uxth	r3, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2028

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
  10:	8383      	strh	r3, [r0, #28]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2029
}
  12:	4770      	bx	lr

Disassembly of section .text.TIM_OC1PolarityConfig:

00000000 <TIM_OC1PolarityConfig>:
TIM_OC1PolarityConfig():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2051

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
   0:	8c03      	ldrh	r3, [r0, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2054

  /* Set or Reset the CC1P Bit */
  tmpccer &= CCER_CC1P_Reset;
   2:	f023 0302 	bic.w	r3, r3, #2
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2055
  tmpccer |= TIM_OCPolarity;
   e:	ea41 0303 	orr.w	r3, r1, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2058

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
  12:	8403      	strh	r3, [r0, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2059
}
  14:	4770      	bx	lr
  16:	bf00      	nop

Disassembly of section .text.TIM_OC1NPolarityConfig:

00000000 <TIM_OC1NPolarityConfig>:
TIM_OC1NPolarityConfig():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2080

  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
   0:	8c03      	ldrh	r3, [r0, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2083

  /* Set or Reset the CC1NP Bit */
  tmpccer &= CCER_CC1NP_Reset;
   2:	f023 0308 	bic.w	r3, r3, #8
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2084
  tmpccer |= TIM_OCNPolarity;
   e:	ea41 0303 	orr.w	r3, r1, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2087

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
  12:	8403      	strh	r3, [r0, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2088
}
  14:	4770      	bx	lr
  16:	bf00      	nop

Disassembly of section .text.TIM_OC2PolarityConfig:

00000000 <TIM_OC2PolarityConfig>:
TIM_OC2PolarityConfig():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2110

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
   0:	8c03      	ldrh	r3, [r0, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2113

  /* Set or Reset the CC2P Bit */
  tmpccer &= CCER_CC2P_Reset;
   2:	f023 0320 	bic.w	r3, r3, #32
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2114
  tmpccer |= (u16)(TIM_OCPolarity << 4);
   e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  12:	b29b      	uxth	r3, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2117

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
  14:	8403      	strh	r3, [r0, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2118
}
  16:	4770      	bx	lr

Disassembly of section .text.TIM_OC2NPolarityConfig:

00000000 <TIM_OC2NPolarityConfig>:
TIM_OC2NPolarityConfig():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2139

  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
   0:	8c03      	ldrh	r3, [r0, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2142

  /* Set or Reset the CC2NP Bit */
  tmpccer &= CCER_CC2NP_Reset;
   2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2143
  tmpccer |= (u16)(TIM_OCNPolarity << 4);
   e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  12:	b29b      	uxth	r3, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2146

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
  14:	8403      	strh	r3, [r0, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2147
}
  16:	4770      	bx	lr

Disassembly of section .text.TIM_OC3PolarityConfig:

00000000 <TIM_OC3PolarityConfig>:
TIM_OC3PolarityConfig():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2169

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
   0:	8c03      	ldrh	r3, [r0, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2172

  /* Set or Reset the CC3P Bit */
  tmpccer &= CCER_CC3P_Reset;
   2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2173
  tmpccer |= (u16)(TIM_OCPolarity << 8);
   e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  12:	b29b      	uxth	r3, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2176

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
  14:	8403      	strh	r3, [r0, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2177
}
  16:	4770      	bx	lr

Disassembly of section .text.TIM_OC3NPolarityConfig:

00000000 <TIM_OC3NPolarityConfig>:
TIM_OC3NPolarityConfig():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2198
 
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
   0:	8c03      	ldrh	r3, [r0, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2201

  /* Set or Reset the CC3NP Bit */
  tmpccer &= CCER_CC3NP_Reset;
   2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2202
  tmpccer |= (u16)(TIM_OCNPolarity << 8);
   e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  12:	b29b      	uxth	r3, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2205

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
  14:	8403      	strh	r3, [r0, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2206
}
  16:	4770      	bx	lr

Disassembly of section .text.TIM_OC4PolarityConfig:

00000000 <TIM_OC4PolarityConfig>:
TIM_OC4PolarityConfig():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2228

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
   0:	8c03      	ldrh	r3, [r0, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2231

  /* Set or Reset the CC4P Bit */
  tmpccer &= CCER_CC4P_Reset;
   2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2232
  tmpccer |= (u16)(TIM_OCPolarity << 12);
   e:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
  12:	b29b      	uxth	r3, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2235

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
  14:	8403      	strh	r3, [r0, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2236
}
  16:	4770      	bx	lr

Disassembly of section .text.TIM_CCxCmd:

00000000 <TIM_CCxCmd>:
TIM_CCxCmd():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2255
*                   This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_CCxCmd(TIM_TypeDef* TIMx, u16 TIM_Channel, u16 TIM_CCx)
{
   0:	b410      	push	{r4}
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2262
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  /* Reset the CCxE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCE_Set << TIM_Channel)));
   2:	8c04      	ldrh	r4, [r0, #32]
   4:	b2a4      	uxth	r4, r4
   6:	f04f 0301 	mov.w	r3, #1
   a:	fa03 f301 	lsl.w	r3, r3, r1
   e:	ea24 0303 	bic.w	r3, r4, r3
  12:	8403      	strh	r3, [r0, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2265

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (u16)(TIM_CCx << TIM_Channel);
  14:	8c03      	ldrh	r3, [r0, #32]
  16:	fa02 f101 	lsl.w	r1, r2, r1
  1a:	ea41 0303 	orr.w	r3, r1, r3
  1e:	b29b      	uxth	r3, r3
  20:	8403      	strh	r3, [r0, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2266
}
  22:	bc10      	pop	{r4}
  24:	4770      	bx	lr
  26:	bf00      	nop

Disassembly of section .text.TIM_CCxNCmd:

00000000 <TIM_CCxNCmd>:
TIM_CCxNCmd():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2283
*                   This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_CCxNCmd(TIM_TypeDef* TIMx, u16 TIM_Channel, u16 TIM_CCxN)
{
   0:	b410      	push	{r4}
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2290
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCNE_Set << TIM_Channel)));
   2:	8c04      	ldrh	r4, [r0, #32]
   4:	b2a4      	uxth	r4, r4
   6:	f04f 0304 	mov.w	r3, #4
   a:	fa03 f301 	lsl.w	r3, r3, r1
   e:	ea24 0303 	bic.w	r3, r4, r3
  12:	8403      	strh	r3, [r0, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2293

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (u16)(TIM_CCxN << TIM_Channel);
  14:	8c03      	ldrh	r3, [r0, #32]
  16:	fa02 f101 	lsl.w	r1, r2, r1
  1a:	ea41 0303 	orr.w	r3, r1, r3
  1e:	b29b      	uxth	r3, r3
  20:	8403      	strh	r3, [r0, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2294
}
  22:	bc10      	pop	{r4}
  24:	4770      	bx	lr
  26:	bf00      	nop

Disassembly of section .text.TIM_SelectOCxM:

00000000 <TIM_SelectOCxM>:
TIM_SelectOCxM():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2323
*                       - TIM_ForcedAction_InActive
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_SelectOCxM(TIM_TypeDef* TIMx, u16 TIM_Channel, u16 TIM_OCMode)
{
   0:	b410      	push	{r4}
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2330
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));
  
  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCE_Set << TIM_Channel)));
   2:	8c04      	ldrh	r4, [r0, #32]
   4:	b2a4      	uxth	r4, r4
   6:	f04f 0301 	mov.w	r3, #1
   a:	fa03 f301 	lsl.w	r3, r3, r1
   e:	ea24 0303 	bic.w	r3, r4, r3
  12:	8403      	strh	r3, [r0, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2332

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
  14:	2908      	cmp	r1, #8
  16:	bf14      	ite	ne
  18:	2300      	movne	r3, #0
  1a:	2301      	moveq	r3, #1
  1c:	2900      	cmp	r1, #0
  1e:	bf08      	it	eq
  20:	f043 0301 	orreq.w	r3, r3, #1
  24:	b173      	cbz	r3, 44 <TIM_SelectOCxM+0x44>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2335
  {
    /* Reset the OCxM bits in the CCMRx register */
    *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + (TIM_Channel>>1))) &= CCMR_OC13M_Mask;
  26:	f100 0018 	add.w	r0, r0, #24
  2a:	ea4f 0151 	mov.w	r1, r1, lsr #1
  2e:	5844      	ldr	r4, [r0, r1]
  30:	f64f 738f 	movw	r3, #65423	; 0xff8f
  34:	ea04 0303 	and.w	r3, r4, r3
  38:	5043      	str	r3, [r0, r1]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2338
   
    /* Configure the OCxM bits in the CCMRx register */
    *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + (TIM_Channel>>1))) |= TIM_OCMode;
  3a:	5843      	ldr	r3, [r0, r1]
  3c:	ea43 0202 	orr.w	r2, r3, r2
  40:	5042      	str	r2, [r0, r1]
  42:	e012      	b.n	6a <TIM_SelectOCxM+0x6a>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2344

  }
  else
  {
    /* Reset the OCxM bits in the CCMRx register */
    *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + ((u16)(TIM_Channel - 4)>> 1))) &= CCMR_OC24M_Mask;
  44:	f100 0018 	add.w	r0, r0, #24
  48:	f1a1 0104 	sub.w	r1, r1, #4
  4c:	f3c1 014e 	ubfx	r1, r1, #1, #15
  50:	5844      	ldr	r4, [r0, r1]
  52:	f648 73ff 	movw	r3, #36863	; 0x8fff
  56:	ea04 0303 	and.w	r3, r4, r3
  5a:	5043      	str	r3, [r0, r1]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2347
    
    /* Configure the OCxM bits in the CCMRx register */
    *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + ((u16)(TIM_Channel - 4)>> 1))) |= (u16)(TIM_OCMode << 8);
  5c:	5843      	ldr	r3, [r0, r1]
  5e:	ea4f 2202 	mov.w	r2, r2, lsl #8
  62:	b292      	uxth	r2, r2
  64:	ea43 0202 	orr.w	r2, r3, r2
  68:	5042      	str	r2, [r0, r1]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2349
  }
}
  6a:	bc10      	pop	{r4}
  6c:	4770      	bx	lr
  6e:	bf00      	nop

Disassembly of section .text.TIM_UpdateDisableConfig:

00000000 <TIM_UpdateDisableConfig>:
TIM_UpdateDisableConfig():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2366
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
   0:	b129      	cbz	r1, e <TIM_UpdateDisableConfig+0xe>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2369
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= CR1_UDIS_Set;
   2:	8803      	ldrh	r3, [r0, #0]
   4:	b29b      	uxth	r3, r3
   6:	f043 0302 	orr.w	r3, r3, #2
   a:	8003      	strh	r3, [r0, #0]
   c:	4770      	bx	lr
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2374
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= CR1_UDIS_Reset;
   e:	8803      	ldrh	r3, [r0, #0]
  10:	f023 0302 	bic.w	r3, r3, #2
  14:	ea4f 5383 	mov.w	r3, r3, lsl #22
  18:	ea4f 5393 	mov.w	r3, r3, lsr #22
  1c:	8003      	strh	r3, [r0, #0]
  1e:	4770      	bx	lr

Disassembly of section .text.TIM_UpdateRequestConfig:

00000000 <TIM_UpdateRequestConfig>:
TIM_UpdateRequestConfig():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2395
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
   0:	b129      	cbz	r1, e <TIM_UpdateRequestConfig+0xe>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2398
  {
    /* Set the URS Bit */
    TIMx->CR1 |= CR1_URS_Set;
   2:	8803      	ldrh	r3, [r0, #0]
   4:	b29b      	uxth	r3, r3
   6:	f043 0304 	orr.w	r3, r3, #4
   a:	8003      	strh	r3, [r0, #0]
   c:	4770      	bx	lr
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2403
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= CR1_URS_Reset;
   e:	8803      	ldrh	r3, [r0, #0]
  10:	f023 0304 	bic.w	r3, r3, #4
  14:	ea4f 5383 	mov.w	r3, r3, lsl #22
  18:	ea4f 5393 	mov.w	r3, r3, lsr #22
  1c:	8003      	strh	r3, [r0, #0]
  1e:	4770      	bx	lr

Disassembly of section .text.TIM_SelectHallSensor:

00000000 <TIM_SelectHallSensor>:
TIM_SelectHallSensor():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2422
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
   0:	b129      	cbz	r1, e <TIM_SelectHallSensor+0xe>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2425
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= CR2_TI1S_Set;
   2:	8883      	ldrh	r3, [r0, #4]
   4:	b29b      	uxth	r3, r3
   6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   a:	8083      	strh	r3, [r0, #4]
   c:	4770      	bx	lr
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2430
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= CR2_TI1S_Reset;
   e:	8883      	ldrh	r3, [r0, #4]
  10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  14:	ea4f 4303 	mov.w	r3, r3, lsl #16
  18:	ea4f 4313 	mov.w	r3, r3, lsr #16
  1c:	8083      	strh	r3, [r0, #4]
  1e:	4770      	bx	lr

Disassembly of section .text.TIM_SelectOnePulseMode:

00000000 <TIM_SelectOnePulseMode>:
TIM_SelectOnePulseMode():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2452
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= CR1_OPM_Reset;
   0:	8803      	ldrh	r3, [r0, #0]
   2:	f023 0308 	bic.w	r3, r3, #8
   6:	ea4f 5383 	mov.w	r3, r3, lsl #22
   a:	ea4f 5393 	mov.w	r3, r3, lsr #22
   e:	8003      	strh	r3, [r0, #0]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2455

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
  10:	8803      	ldrh	r3, [r0, #0]
  12:	b29b      	uxth	r3, r3
  14:	ea41 0303 	orr.w	r3, r1, r3
  18:	8003      	strh	r3, [r0, #0]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2456
}
  1a:	4770      	bx	lr

Disassembly of section .text.TIM_SelectOutputTrigger:

00000000 <TIM_SelectOutputTrigger>:
TIM_SelectOutputTrigger():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2486
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
  assert_param(IS_TIM_PERIPH_TRGO(TIMx, TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= CR2_MMS_Mask;
   0:	8883      	ldrh	r3, [r0, #4]
   2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   e:	8083      	strh	r3, [r0, #4]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2489

  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
  10:	8883      	ldrh	r3, [r0, #4]
  12:	b29b      	uxth	r3, r3
  14:	ea41 0303 	orr.w	r3, r1, r3
  18:	8083      	strh	r3, [r0, #4]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2490
}
  1a:	4770      	bx	lr

Disassembly of section .text.TIM_SelectSlaveMode:

00000000 <TIM_SelectSlaveMode>:
TIM_SelectSlaveMode():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2513
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= SMCR_SMS_Mask;
   0:	8903      	ldrh	r3, [r0, #8]
   2:	f023 0307 	bic.w	r3, r3, #7
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   e:	8103      	strh	r3, [r0, #8]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2516

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
  10:	8903      	ldrh	r3, [r0, #8]
  12:	b29b      	uxth	r3, r3
  14:	ea41 0303 	orr.w	r3, r1, r3
  18:	8103      	strh	r3, [r0, #8]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2517
}
  1a:	4770      	bx	lr

Disassembly of section .text.TIM_SelectMasterSlaveMode:

00000000 <TIM_SelectMasterSlaveMode>:
TIM_SelectMasterSlaveMode():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2539
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= SMCR_MSM_Reset;
   0:	8903      	ldrh	r3, [r0, #8]
   2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   e:	8103      	strh	r3, [r0, #8]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2542
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
  10:	8903      	ldrh	r3, [r0, #8]
  12:	b29b      	uxth	r3, r3
  14:	ea41 0303 	orr.w	r3, r1, r3
  18:	8103      	strh	r3, [r0, #8]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2543
}
  1a:	4770      	bx	lr

Disassembly of section .text.TIM_SetCounter:

00000000 <TIM_SetCounter>:
TIM_SetCounter():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2559
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
   0:	8481      	strh	r1, [r0, #36]	; 0x24
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2560
}
   2:	4770      	bx	lr

Disassembly of section .text.TIM_SetAutoreload:

00000000 <TIM_SetAutoreload>:
TIM_SetAutoreload():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2576
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
   0:	8581      	strh	r1, [r0, #44]	; 0x2c
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2577
}
   2:	4770      	bx	lr

Disassembly of section .text.TIM_SetCompare1:

00000000 <TIM_SetCompare1>:
TIM_SetCompare1():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2594
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
   0:	8681      	strh	r1, [r0, #52]	; 0x34
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2595
}
   2:	4770      	bx	lr

Disassembly of section .text.TIM_SetCompare2:

00000000 <TIM_SetCompare2>:
TIM_SetCompare2():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2612
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
   0:	8701      	strh	r1, [r0, #56]	; 0x38
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2613
}
   2:	4770      	bx	lr

Disassembly of section .text.TIM_SetCompare3:

00000000 <TIM_SetCompare3>:
TIM_SetCompare3():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2630
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
   0:	8781      	strh	r1, [r0, #60]	; 0x3c
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2631
}
   2:	4770      	bx	lr

Disassembly of section .text.TIM_SetCompare4:

00000000 <TIM_SetCompare4>:
TIM_SetCompare4():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2648
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
   0:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2649
}
   4:	4770      	bx	lr
   6:	bf00      	nop

Disassembly of section .text.TIM_SetIC1Prescaler:

00000000 <TIM_SetIC1Prescaler>:
TIM_SetIC1Prescaler():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2673
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= CCMR_IC13PSC_Mask;
   0:	8b03      	ldrh	r3, [r0, #24]
   2:	f023 030c 	bic.w	r3, r3, #12
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   e:	8303      	strh	r3, [r0, #24]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2676

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
  10:	8b03      	ldrh	r3, [r0, #24]
  12:	b29b      	uxth	r3, r3
  14:	ea41 0303 	orr.w	r3, r1, r3
  18:	8303      	strh	r3, [r0, #24]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2677
}
  1a:	4770      	bx	lr

Disassembly of section .text.TIM_SetIC2Prescaler:

00000000 <TIM_SetIC2Prescaler>:
TIM_SetIC2Prescaler():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2701
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= CCMR_IC24PSC_Mask;
   0:	8b03      	ldrh	r3, [r0, #24]
   2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   e:	8303      	strh	r3, [r0, #24]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2704

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (u16)(TIM_ICPSC << 8);
  10:	8b03      	ldrh	r3, [r0, #24]
  12:	b29b      	uxth	r3, r3
  14:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  18:	b29b      	uxth	r3, r3
  1a:	8303      	strh	r3, [r0, #24]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2705
}
  1c:	4770      	bx	lr
  1e:	bf00      	nop

Disassembly of section .text.TIM_PWMIConfig:

00000000 <TIM_PWMIConfig>:
TIM_PWMIConfig():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:651
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
   0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2:	4605      	mov	r5, r0
   4:	460c      	mov	r4, r1
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:659

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
   6:	8849      	ldrh	r1, [r1, #2]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:661
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
   8:	2900      	cmp	r1, #0
   a:	bf0c      	ite	eq
   c:	2602      	moveq	r6, #2
   e:	2600      	movne	r6, #0
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:669
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }

  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
  10:	88a2      	ldrh	r2, [r4, #4]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:671
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
  12:	2a01      	cmp	r2, #1
  14:	bf14      	ite	ne
  16:	2701      	movne	r7, #1
  18:	2702      	moveq	r7, #2
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:678
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }

  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  1a:	8823      	ldrh	r3, [r4, #0]
  1c:	b98b      	cbnz	r3, 42 <TIM_PWMIConfig+0x42>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:681
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
  1e:	8923      	ldrh	r3, [r4, #8]
  20:	f7ff fffe 	bl	0 <TIM_PWMIConfig>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:685
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  24:	4628      	mov	r0, r5
  26:	88e1      	ldrh	r1, [r4, #6]
  28:	f7ff fffe 	bl	0 <TIM_PWMIConfig>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:688

    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
  2c:	4628      	mov	r0, r5
  2e:	4631      	mov	r1, r6
  30:	463a      	mov	r2, r7
  32:	8923      	ldrh	r3, [r4, #8]
  34:	f7ff fffe 	bl	0 <TIM_PWMIConfig>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:691

    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  38:	4628      	mov	r0, r5
  3a:	88e1      	ldrh	r1, [r4, #6]
  3c:	f7ff fffe 	bl	0 <TIM_PWMIConfig>
  40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:696
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
  42:	8923      	ldrh	r3, [r4, #8]
  44:	f7ff fffe 	bl	0 <TIM_PWMIConfig>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:700
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  48:	4628      	mov	r0, r5
  4a:	88e1      	ldrh	r1, [r4, #6]
  4c:	f7ff fffe 	bl	0 <TIM_PWMIConfig>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:703

    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
  50:	4628      	mov	r0, r5
  52:	4631      	mov	r1, r6
  54:	463a      	mov	r2, r7
  56:	8923      	ldrh	r3, [r4, #8]
  58:	f7ff fffe 	bl	0 <TIM_PWMIConfig>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:706

    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  5c:	4628      	mov	r0, r5
  5e:	88e1      	ldrh	r1, [r4, #6]
  60:	f7ff fffe 	bl	0 <TIM_PWMIConfig>
  64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  66:	bf00      	nop

Disassembly of section .text.TIM_SetIC3Prescaler:

00000000 <TIM_SetIC3Prescaler>:
TIM_SetIC3Prescaler():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2729
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= CCMR_IC13PSC_Mask;
   0:	8b83      	ldrh	r3, [r0, #28]
   2:	f023 030c 	bic.w	r3, r3, #12
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   e:	8383      	strh	r3, [r0, #28]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2732

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
  10:	8b83      	ldrh	r3, [r0, #28]
  12:	b29b      	uxth	r3, r3
  14:	ea41 0303 	orr.w	r3, r1, r3
  18:	8383      	strh	r3, [r0, #28]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2733
}
  1a:	4770      	bx	lr

Disassembly of section .text.TIM_SetIC4Prescaler:

00000000 <TIM_SetIC4Prescaler>:
TIM_SetIC4Prescaler():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2757
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= CCMR_IC24PSC_Mask;
   0:	8b83      	ldrh	r3, [r0, #28]
   2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   e:	8383      	strh	r3, [r0, #28]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2760

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (u16)(TIM_ICPSC << 8);
  10:	8b83      	ldrh	r3, [r0, #28]
  12:	b29b      	uxth	r3, r3
  14:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  18:	b29b      	uxth	r3, r3
  1a:	8383      	strh	r3, [r0, #28]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2761
}
  1c:	4770      	bx	lr
  1e:	bf00      	nop

Disassembly of section .text.TIM_ICInit:

00000000 <TIM_ICInit>:
TIM_ICInit():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:586
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
   0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2:	4604      	mov	r4, r0
   4:	460d      	mov	r5, r1
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:595
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
   6:	880b      	ldrh	r3, [r1, #0]
   8:	b94b      	cbnz	r3, 1e <TIM_ICInit+0x1e>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:598
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
   a:	8849      	ldrh	r1, [r1, #2]
   c:	88aa      	ldrh	r2, [r5, #4]
   e:	892b      	ldrh	r3, [r5, #8]
  10:	f7ff fffe 	bl	0 <TIM_ICInit>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:603
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  14:	4620      	mov	r0, r4
  16:	88e9      	ldrh	r1, [r5, #6]
  18:	f7ff fffe 	bl	0 <TIM_ICInit>
  1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:605
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  1e:	2b04      	cmp	r3, #4
  20:	d109      	bne.n	36 <TIM_ICInit+0x36>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:608
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
  22:	8849      	ldrh	r1, [r1, #2]
  24:	88aa      	ldrh	r2, [r5, #4]
  26:	892b      	ldrh	r3, [r5, #8]
  28:	f7ff fffe 	bl	0 <TIM_ICInit>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:613
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  2c:	4620      	mov	r0, r4
  2e:	88e9      	ldrh	r1, [r5, #6]
  30:	f7ff fffe 	bl	0 <TIM_ICInit>
  34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:615
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  36:	2b08      	cmp	r3, #8
  38:	d128      	bne.n	8c <TIM_ICInit+0x8c>
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:618
  {
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
  3a:	8848      	ldrh	r0, [r1, #2]
  3c:	888e      	ldrh	r6, [r1, #4]
  3e:	890f      	ldrh	r7, [r1, #8]
TI3_Config():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3153
                       u16 TIM_ICFilter)
{
  u16 tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
  40:	8c21      	ldrh	r1, [r4, #32]
  42:	f421 7180 	bic.w	r1, r1, #256	; 0x100
  46:	ea4f 4101 	mov.w	r1, r1, lsl #16
  4a:	ea4f 4111 	mov.w	r1, r1, lsr #16
  4e:	8421      	strh	r1, [r4, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3155

  tmpccmr2 = TIMx->CCMR2;
  50:	8ba2      	ldrh	r2, [r4, #28]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3156
  tmpccer = TIMx->CCER;
  52:	8c23      	ldrh	r3, [r4, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3160
  tmp = (u16)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  54:	f022 02f3 	bic.w	r2, r2, #243	; 0xf3
  58:	ea4f 4202 	mov.w	r2, r2, lsl #16
  5c:	ea4f 4212 	mov.w	r2, r2, lsr #16
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3161
  tmpccmr2 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
  60:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  64:	b292      	uxth	r2, r2
  66:	4332      	orrs	r2, r6
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3164

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= CCER_CC3P_Reset;
  68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  6c:	ea4f 4303 	mov.w	r3, r3, lsl #16
  70:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3165
  tmpccer |= tmp | CCER_CC3E_Set;
  74:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  78:	b29b      	uxth	r3, r3
  7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3168

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
  7e:	83a2      	strh	r2, [r4, #28]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3169
  TIMx->CCER = tmpccer;
  80:	8423      	strh	r3, [r4, #32]
TIM_ICInit():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:623
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  82:	4620      	mov	r0, r4
  84:	88e9      	ldrh	r1, [r5, #6]
  86:	f7ff fffe 	bl	0 <TIM_ICInit>
  8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:628
  }
  else
  {
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
  8c:	8848      	ldrh	r0, [r1, #2]
  8e:	888f      	ldrh	r7, [r1, #4]
  90:	890e      	ldrh	r6, [r1, #8]
TI4_Config():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3200
                       u16 TIM_ICFilter)
{
  u16 tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
  92:	8c21      	ldrh	r1, [r4, #32]
  94:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  98:	ea4f 4101 	mov.w	r1, r1, lsl #16
  9c:	ea4f 4111 	mov.w	r1, r1, lsr #16
  a0:	8421      	strh	r1, [r4, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3202

  tmpccmr2 = TIMx->CCMR2;
  a2:	8ba2      	ldrh	r2, [r4, #28]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3203
  tmpccer = TIMx->CCER;
  a4:	8c23      	ldrh	r3, [r4, #32]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3207
  tmp = (u16)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  a6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  aa:	ea4f 5202 	mov.w	r2, r2, lsl #20
  ae:	ea4f 5212 	mov.w	r2, r2, lsr #20
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3208
  tmpccmr2 |= (u16)(TIM_ICSelection << 8) | (u16)(TIM_ICFilter << 12);
  b2:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  b6:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  ba:	b292      	uxth	r2, r2
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3211

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
  bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  c0:	ea4f 4303 	mov.w	r3, r3, lsl #16
  c4:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3212
  tmpccer |= tmp | CCER_CC4E_Set;
  c8:	ea43 3300 	orr.w	r3, r3, r0, lsl #12
  cc:	b29b      	uxth	r3, r3
  ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3215

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
  d2:	83a2      	strh	r2, [r4, #28]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3216
  TIMx->CCER = tmpccer ;
  d4:	8423      	strh	r3, [r4, #32]
TIM_ICInit():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:633
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  d6:	4620      	mov	r0, r4
  d8:	88e9      	ldrh	r1, [r5, #6]
  da:	f7ff fffe 	bl	0 <TIM_ICInit>
  de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

Disassembly of section .text.TIM_SetClockDivision:

00000000 <TIM_SetClockDivision>:
TIM_SetClockDivision():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2783
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= CR1_CKD_Mask;
   0:	8803      	ldrh	r3, [r0, #0]
   2:	b2db      	uxtb	r3, r3
   4:	8003      	strh	r3, [r0, #0]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2786

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
   6:	8803      	ldrh	r3, [r0, #0]
   8:	b29b      	uxth	r3, r3
   a:	ea41 0303 	orr.w	r3, r1, r3
   e:	8003      	strh	r3, [r0, #0]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2787
}
  10:	4770      	bx	lr
  12:	bf00      	nop

Disassembly of section .text.TIM_GetCapture1:

00000000 <TIM_GetCapture1>:
TIM_GetCapture1():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2802
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
   0:	8e80      	ldrh	r0, [r0, #52]	; 0x34
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2803
}
   2:	b280      	uxth	r0, r0
   4:	4770      	bx	lr
   6:	bf00      	nop

Disassembly of section .text.TIM_GetCapture2:

00000000 <TIM_GetCapture2>:
TIM_GetCapture2():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2819
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
   0:	8f00      	ldrh	r0, [r0, #56]	; 0x38
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2820
}
   2:	b280      	uxth	r0, r0
   4:	4770      	bx	lr
   6:	bf00      	nop

Disassembly of section .text.TIM_GetCapture3:

00000000 <TIM_GetCapture3>:
TIM_GetCapture3():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2836
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
   0:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2837
}
   2:	b280      	uxth	r0, r0
   4:	4770      	bx	lr
   6:	bf00      	nop

Disassembly of section .text.TIM_GetCapture4:

00000000 <TIM_GetCapture4>:
TIM_GetCapture4():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2853
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
   0:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2854
}
   4:	b280      	uxth	r0, r0
   6:	4770      	bx	lr

Disassembly of section .text.TIM_GetCounter:

00000000 <TIM_GetCounter>:
TIM_GetCounter():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2869
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
   0:	8c80      	ldrh	r0, [r0, #36]	; 0x24
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2870
}
   2:	b280      	uxth	r0, r0
   4:	4770      	bx	lr
   6:	bf00      	nop

Disassembly of section .text.TIM_GetPrescaler:

00000000 <TIM_GetPrescaler>:
TIM_GetPrescaler():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2885
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
   0:	8d00      	ldrh	r0, [r0, #40]	; 0x28
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2886
}
   2:	b280      	uxth	r0, r0
   4:	4770      	bx	lr
   6:	bf00      	nop

Disassembly of section .text.TIM_GetFlagStatus:

00000000 <TIM_GetFlagStatus>:
TIM_GetFlagStatus():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2918
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  assert_param(IS_TIM_PERIPH_FLAG(TIMx, TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (u16)RESET)
   0:	8a03      	ldrh	r3, [r0, #16]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2920
  {
    bitstatus = SET;
   2:	4219      	tst	r1, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2927
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
   4:	bf0c      	ite	eq
   6:	2000      	moveq	r0, #0
   8:	2001      	movne	r0, #1
   a:	4770      	bx	lr

Disassembly of section .text.TIM_ClearFlag:

00000000 <TIM_ClearFlag>:
TIM_ClearFlag():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2957
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIMx, TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (u16)~TIM_FLAG;
   0:	ea6f 0101 	mvn.w	r1, r1
   4:	b289      	uxth	r1, r1
   6:	8201      	strh	r1, [r0, #16]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2958
}
   8:	4770      	bx	lr
   a:	bf00      	nop

Disassembly of section .text.TIM_GetITStatus:

00000000 <TIM_GetITStatus>:
TIM_GetITStatus():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2988
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
  assert_param(IS_TIM_PERIPH_IT(TIMx, TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
   0:	8a02      	ldrh	r2, [r0, #16]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2990
  
  itenable = TIMx->DIER & TIM_IT;
   2:	8983      	ldrh	r3, [r0, #12]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:2992

  if ((itstatus != (u16)RESET) && (itenable != (u16)RESET))
   4:	4211      	tst	r1, r2
   6:	bf0c      	ite	eq
   8:	2000      	moveq	r0, #0
   a:	2001      	movne	r0, #1
   c:	4219      	tst	r1, r3
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3001
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
   e:	bf0c      	ite	eq
  10:	2000      	moveq	r0, #0
  12:	f000 0001 	andne.w	r0, r0, #1
  16:	4770      	bx	lr

Disassembly of section .text.TIM_ClearITPendingBit:

00000000 <TIM_ClearITPendingBit>:
TIM_ClearITPendingBit():
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3028
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PERIPH_IT(TIMx, TIM_IT));

  /* Clear the IT pending Bit */
  TIMx->SR = (u16)~TIM_IT;
   0:	ea6f 0101 	mvn.w	r1, r1
   4:	b289      	uxth	r1, r1
   6:	8201      	strh	r1, [r0, #16]
C:\Users\fv\Desktop\TAMA\GPIO\library\src/stm32f10x_tim.c:3029
}
   8:	4770      	bx	lr
   a:	bf00      	nop
